#!/usr/bin/env python3


from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox, QSystemTrayIcon
from PyQt5.QtGui import QIcon, QPixmap, QMovie
from PyQt5.QtCore import QTimer, QThread, pyqtSignal
from QLed import QLed
from design import Ui_MainWindow
from sys import exit
from requests import get
from selenium import webdriver
from shutil import copyfileobj
from urllib import request as url_request
from genericpath import isfile
from webbrowser import open as open_url
from os import listdir, path, popen, system, rename
from time import sleep, localtime, strftime
from threading import Thread
from notifications import checkURL, getDescription, loadImage, checkFixedOutput, parseRanobe
from json import dumps, load
from pyttsx3 import init
from validators import url as check_url
from datetime import date


dead = True
enable = True
checker_tag = True
update_list_anime = False


class ThreadProgress(QThread):
    _signal = pyqtSignal(int)
    def __init__(self, data, flag=True):
        super(ThreadProgress, self).__init__()
        self.flag = flag
        self.data = data
        self.current_path = path.dirname(path.realpath(__file__))
        self.check = 0


    def __del__(self):
        self.wait()


    def run(self):
        self.check = 0
        global dead, checker_tag, update_list_anime, enable
        checker_tag = False
        enable = False
        dead = True
        name = []
        try:
            for i in enumerate(self.data['anime']['urls']):
                if not dead:
                    raise Exception('Extra close Thread..')
                series = self.data['anime']['series'][i[0]] + 1
                ova = self.data['anime']['ova'][i[0]] + 1
                names, check_output = checkURL(self.data, i[1], series, ova)
                if check_output:
                    self.check += 1
                if names == '':
                    raise Exception('ERROR FOR URL_CHECK..')
                if self.flag == False:
                    if 'description/' in self.data['anime']['images'][i[0]]:
                        pass
                    else:
                        img, desc = getDescription(i[1])
                        self.data['anime']['images'][i[0]] = f'description/{img}'
                        self.data['anime']['description'][i[0]] = desc
                    name.append(names)
                index = i[0] + 1
                percent = int(index / len(self.data['anime']['urls']) * 100)
                self._signal.emit(percent)
                update_list_anime = True

            if isinstance(self.data, dict) and self.flag == False:
                self.data['anime']['name'] = name
                with open(f'{self.current_path}/setting.json', 'w') as js:
                    js.write(f"{dumps(self.data, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")
        except Exception as e:
            print('Error ==>\n', e)
            system(f'notify-send "Error checking anime\n{e}"')

        print(self.check)
        if self.check > 0:
            self.data['notify']['notify'] = 'unchecked'
            if isinstance(self.data, dict):
                with open(f'{self.current_path}/setting.json', 'w') as js:
                    js.write(f"{dumps(self.data, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")
            tts = init()
            tts.say("Something new came out... check the natification log...")
            tts.runAndWait()
            system('notify-send "Вышло кое-что новенькое!!!"')
        
        sleep(1)
        percent = 0
        self._signal.emit(percent)
        del(self.check)
        checker_tag = True
        print(True)


class myWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(myWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setFocus()
        self.setGeometry(480, 55, 400, 300)

        self.flag = True
        self.f_flag = True
        self.check_flag = False
        self.click = 0
        self.percent = 0
        self.percent_all_anime = 0
        self.percent_all_manga = 0
        self.percent_desc_manga = 0
        self.ranobe_percent = 0
        self.color = 0
        self.path_down = f'{path.dirname(path.realpath(__file__))}/downloads'
        self.prefs = {'download.default_directory': self.path_down, "download.prompt_for_download": False}

        self.timer = QTimer()
        self.timer.timeout.connect(self.timeNumber)

        self.ui.toolButton_24.setStyleSheet('border: none;')
        self.ui.toolButton_10.setStyleSheet('border: none;')
        self.ui.toolButton_11.setStyleSheet('border: none;')
        self.ui.progressBar.setStyleSheet('selection-background-color: #00e916; background-image: linear-gradient(160deg, #00e916 0%, #3dffe9 75%);')
        self.ui.progressBar_2.setStyleSheet('selection-background-color: #8BC6EC; background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);')
        self.ui.progressBar_3.setStyleSheet('selection-background-color: #FFE53B; background-image: linear-gradient(22deg, #FFE53B 0%, #FF2525 82%);')
        self.ui.progressBar_7.setStyleSheet('selection-background-color: #FF3CAC; background-image: linear-gradient(219deg, #FF3CAC 4%, #784BA0 44%, #2B86C5 100%);')

        self.current_path = path.dirname(path.realpath(__file__))

        self.movie = QMovie(f"{self.current_path}/icons/free.gif")
        self.labels_movie = [self.ui.label, self.ui.label_2, self.ui.label_3, self.ui.label_4, self.ui.label_8, self.ui.label_9, self.ui.label_10, self.ui.label_11]

        for i in enumerate(self.labels_movie):
            i[1].setMovie(self.movie)
        
        self.tray = QSystemTrayIcon(self)
        self.tray.activated.connect(self.triggerFocus)
        self.tray.show()

        self.led = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.led.setGeometry(370, 135, 12, 12)

        self.timeNumber()
        self.defaultIcon()

        self.showed()
        self.viewRanobe()

        self.showCombo()
        self.viewDescription()
        self.updateNumber()
        self.upComboAnime()
        self.viewDescriptionManga()
        self.upComboRanobe()
        self.viewDescriptionRanobe()

        self.ui.comboBox.activated[str].connect(self.upComboAnime)
        self.ui.comboBox_2.activated[str].connect(self.updateNumber)
        self.ui.comboBox_3.activated[str].connect(self.viewDescription)
        self.ui.comboBox_4.activated[str].connect(self.viewDescriptionManga)
        self.ui.comboBox_5.activated[str].connect(self.viewDescriptionRanobe)
        self.ui.comboBox_6.activated[str].connect(self.upComboRanobe)

        self.timer_check = QTimer()
        self.timer_check.timeout.connect(self.update)
       
        self.update()
        self.ui.tabWidget.setCurrentIndex(0)
        self.comboTracker()
#### << Maiin-module >> ####
        self.ui.toolButton_3.clicked.connect(self.closed)
        self.ui.toolButton_11.clicked.connect(self.modeColorSheme)
        self.ui.toolButton_18.clicked.connect(self.openURL)
#### << Anime-module >> ####
        self.ui.toolButton.clicked.connect(self.saved)
        self.ui.toolButton_2.clicked.connect(self.deleted)
        self.ui.toolButton_4.clicked.connect(self.allDown)
        self.ui.toolButton_5.clicked.connect(self.oneDown)
        self.ui.toolButton_6.clicked.connect(self.stoped)
        self.ui.toolButton_7.clicked.connect(self.loging)
        self.ui.toolButton_8.clicked.connect(self.logOne)
        self.ui.toolButton_9.clicked.connect(self.updateClick)
        self.ui.toolButton_10.clicked.connect(self.notifyCheck)
        self.ui.toolButton_12.clicked.connect(self.update)
#### << Manga-module >> ####
        self.ui.toolButton_13.clicked.connect(self.loged)
        self.ui.toolButton_15.clicked.connect(self.savedUrl)
        self.ui.toolButton_17.clicked.connect(self.currentUpdate)
        self.ui.toolButton_19.clicked.connect(self.delItem)
        self.ui.toolButton_20.clicked.connect(self.updateClickManga)
        self.ui.toolButton_21.clicked.connect(self.checkUpdateItem)
#### << Ranobe-module >> ####
        self.ui.toolButton_26.clicked.connect(self.updateRanobeUrl)
        self.ui.toolButton_27.clicked.connect(self.logRanobe)
        self.ui.toolButton_29.clicked.connect(self.delItemRanobe)
        self.ui.toolButton_30.clicked.connect(self.updateItemRanobe)
        self.ui.toolButton_31.clicked.connect(self.checkRanobeUrl)
        self.ui.toolButton_32.clicked.connect(self.saveRanobeUrl)
        

    def keyPressEvent(self, QKeyEvent):
        int_key = QKeyEvent.key()
        print(int_key)
        if int_key == 16777216:
            self.hidded()
            self.click += 1


    def uploadGlobalSettings(self):
        try:
            with open(f'{self.current_path}/setting.json', 'r') as reads:
                data = load(reads)
        except Exception as e:
            print(f'Error upload setting.json..\n{e}')
            system(f'notify-send "Error upload settitng.json\n{e}"')

            with open(f'{self.current_path}/default.json', 'r') as reads:
                data = load(reads)
        return data


    def setGlobalSettings(self, to_json: dict, tab, mode: str, var, flag=False, state=False):
        if state:
            pass
        else:
            if flag:
                if tab == "":
                    to_json[mode].append(var)
                else:
                    to_json[tab][mode].append(var)
            else:
                if tab == '':
                    to_json[mode] = var
                else:
                    to_json[tab][mode] = var
        if isinstance(to_json, dict):
            with open(f'{self.current_path}/setting.json', 'w') as js:
                js.write(f"{dumps(to_json, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")
            with open(f'{self.current_path}/default.json', 'w') as js:
                js.write(f"{dumps(to_json, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")
        else:
            system(f'notify-send "Error setting Global... no update file <setting.json>"')
            print('Error setting Global.. no update file <setting.json>')


    def startMovie(self):
        self.movie.start()


    def startSmallMovie(self):
        self.small_movie.start()


    def stopMovie(self):
        self.movie.stop()


    def allParsing(self, data):
        global dead
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        option.add_experimental_option("prefs", self.prefs)
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        url, numbers = (data['anime']['urls'], data['anime']['series'])

        logs = []
        if len(url) > 0:
            for i in enumerate(url):
                index_i = i[0] + 1
                self.percent_all_anime = int(index_i / len(url) * 100)
                self.ui.progressBar_2.setToolTip(f'check - {index_i}/{len(url)}..')
                try:
                    series = numbers[i[0]] + 1
                    print(i)
                    driver.get(i[1])
                    print(0)
                    sleep(3)
                    search_count_series = driver.find_elements_by_class_name('epizode')
                    name = driver.find_element_by_class_name('shortstoryHead').text
                    next = driver.find_element_by_class_name('next')
                    name_dir = name.split(' /')

                    print(name_dir[0])

                    series += data['anime']['ova'][i[0]]
                    if len(search_count_series) == series:
                        if len(search_count_series) > 6:
                            next.click()
                            if len(search_count_series) > 12:
                                next.click()
                                if len(search_count_series) > 18:
                                    next.click()
                                    if len(search_count_series) > 24:
                                        next.click()
                        if data['anime']['ova'][urls.index(url)] > 0:
                            num = -(data['anime']['ova'][urls.index(url)]+1)
                            search_count_series[num].click()
                            click_i = search_count_series[num].click()
                        elif data['anime']['ova'][urls.index(url)] == 0:
                            search_count_series[-1].click()
                            click_i = search_count_series[-1].text
                        sleep(15)
                        iframe = driver.find_elements_by_tag_name('iframe')
                        for item in range(len(iframe)):
                            driver.switch_to.frame(iframe[item])
                            sleep(1)
                            down = driver.find_elements_by_class_name('butt')
                            if len(down) != 4:
                                sleep(1)
                                driver.switch_to.default_content()
                                continue
                            else:
                                break
                        sleep(3)
                        let = down[-2].get_attribute("href").split('?')
                        let = let[0].split('/')
                        sleep(3)
                        print(100)
                        self.check_flag = False
                        self.Download(down[2].get_attribute('href'), let[-1], url, name_dir[0], i[1], name, series, data, click_i)
                        logs.append(f'{i[0]} - {name_dir[0]} - New series {series}\n')
                    else:
                        logs.append(f'{i[0]} - {name_dir[0]} - No new < {series} > series\n')
                    driver.switch_to.default_content()
                    sleep(5)
                except Exception as e:
                    system(f'notify-send "Error all-down\n{e}"')
                    logs.append(f'{i[0]} - !!! << Error: {e} >> !!!\n')

        driver.quit()
        data['anime']['logs'] = logs
        self.setGlobalSettings(data, 'anime', 'logs', logs)

        sleep(2)
        dead = False
        sleep(0.5)

        self.ui.progressBar_2.setToolTip(f'Progress Checking..')
        self.percent_all_anime = 0
        dead = True


    def oneParsing(self, data, url, digit):
        global dead
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        option.add_experimental_option("prefs", self.prefs)
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        urls = data['anime']['urls']
        log = ''
        try:
            self.percent_all_anime = 5
            series = digit + 1
            print(url)
            driver.get(url)
            self.percent_all_anime = 15
            print(0)
            sleep(3)
            search_count_series = driver.find_elements_by_class_name('epizode')
            name = driver.find_element_by_class_name('shortstoryHead').text
            next = driver.find_element_by_class_name('next')
            name_dir = name.split(' /')
            self.percent_all_anime = 35

            print(name_dir[0], len(search_count_series))

            series += data['anime']['ova'][urls.index(url)]
            print(series)
            if len(search_count_series) == series:
                if len(search_count_series) > 6:
                    next.click()
                    if len(search_count_series) > 12:
                        next.click()
                        if len(search_count_series) > 18:
                            next.click()
                            if len(search_count_series) > 24:
                                next.click()
                self.percent_all_anime = 40

                if data['anime']['ova'][urls.index(url)] > 0:
                    num = -(data['anime']['ova'][urls.index(url)]+1)
                    while True:
                        click_i = search_count_series[num].text
                        if click_i != '':
                            break
                    search_count_series[num].click()
                elif data['anime']['ova'][urls.index(url)] == 0:
                    # search_count_series[digit].click()
                    while True:
                        click_i = search_count_series[-1].text
                        if click_i != '':
                            break
                    search_count_series[-1].click()

                print(click_i)
                sleep(15)
                iframe = driver.find_elements_by_tag_name('iframe')
                for item in range(len(iframe)):
                    driver.switch_to.frame(iframe[item])
                    sleep(1)
                    down = driver.find_elements_by_class_name('butt')
                    if len(down) != 4:
                        sleep(1)
                        driver.switch_to.default_content()
                        continue
                    else:
                        break
                self.percent_all_anime = 55
                sleep(3)
                let = down[-2].get_attribute("href").split('?')
                let = let[0].split('/')
                self.percent_all_anime = 65
                sleep(3)
                print(down[2].get_attribute('href'))
                self.check_flag = False
                self.Download(down[2].get_attribute('href'), let[-1], urls, name_dir[0], url, name, series, data, click_i)
                self.percent_all_anime = 97
                log = f'{name_dir[0]} - New series {series}'
            else:
                log = f'{name_dir[0]} - No new < {series} > series'
            driver.switch_to.default_content()
        except Exception as e:
            driver.quit()
            system(f'notify-send "Error one-down\n<< {e} >>"')
            log = f"!!! << Error: {e} >> !!!"
            print(f"!!! << Error: {e} >> !!!")

        driver.quit()
        data['anime']['log'] = log
        self.setGlobalSettings(data, 'anime', 'log', log)
        self.percent_all_anime = 100
        if self.percent_all_anime == 100:
            self.ui.progressBar_2.setFormat('Completed')
        sleep(2)
        dead = False
        self.percent_all_anime = 0
        sleep(0.5)
        dead = True
        self.ui.progressBar_2.setFormat('%p%')


    def checkUpload(self, f, url, dirs, link, name, series, data, search='серия'):
        curent_time = strftime("%H:%M", localtime())
        system(f'notify-send "Вышла новая серия!{name}\n{curent_time}"')
        names_dir = '_'.join(dirs.split())
        if 'серия' in search:
            data['anime']['series'][url.index(link)] += 1
        elif 'ОВА' in search:
            data['anime']['ova'][url.index(link)] += 1
            series = f"ova-{data['anime']['ova'][url.index(link)]}"
        new = path.join(f'{path.dirname(__file__)}/downloads', f'{names_dir}-{series}.mp4')
        old = path.join(f'{path.dirname(__file__)}/downloads', f'_{f}')

        rename(old, new)

        if not path.isdir(f'{self.current_path}/downloads/'):
            system(f'mkdir "{self.current_path}/downloads/"')

        if not path.isdir(f'{self.current_path}/downloads/{names_dir}'):
            system(f'mkdir "{self.current_path}/downloads/{names_dir}"')

        system(f'mv "{self.path_down}/{names_dir}-{series}.mp4" "{self.path_down}/{names_dir}/"')
        print(search)
        self.setGlobalSettings(data, 'anime', 'series', data['anime']['series'])


    def handleProgress(self, blocknum, blocksize, totalsize):
        global dead
        readed_data = blocknum * blocksize
        if totalsize > 0:
            self.percent = int(readed_data * 100 / totalsize)
            if dead == False:
                raise Exception("Sorry, no numbers below zero")
            QtWidgets.QApplication.processEvents()


    def Download(self, down, f, urls, dirs, link, name, series, data, search):
        global dead
        dead = True
        save_loc = f'{self.current_path}/downloads/_{f}'
        try:
            self.ui.progressBar.setToolTip(f'Download:\n{dirs} -> {data["anime"]["series"][urls.index(link)]+1}')
            self.ui.progressBar.setFormat('Complete %p%')
            url_request.urlretrieve(down, save_loc, self.handleProgress)
            self.ui.progressBar.setFormat('Completed')
            while True:
                for i in range(len(data['notify']['anime'])):
                    if dirs in data['notify']['anime'][i]:
                        del(data['notify']['anime'][i])
                        break
                else:
                    break
            if len(data['notify']['anime']) == 0 and len(data['notify']['manga']) == 0 and len(data['notify']['ranobe']) == 0:
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/empty.png'))
                data['notify']['notify'] = 'empty'
            self.checkUpload(f, urls, dirs, link, name, series, data, search)
        except Exception as e:
            system(f'rm {self.current_path}/downloads/_{f}')
            system(f'notify-send "Error download anime: {dirs}\n{e}"')
            dead = True
            print('Error: ==>\n', e)
            self.ui.progressBar.setToolTip(f'Error download\n{dirs} -> {data["anime"]["series"][urls.index(link)]+1}')


    def extraClose(self):
        global dead
        dead = False
        system('killall chromedriver')
        self.defaultIcon()


    def progressCount(self, percent):
        self.ui.progressBar_2.setValue(percent)


    def stopCheck(self):
        self.f_flag = False


    def uploadTrackerAnime(self):
        self.ui.comboBox_7.clear()
        data = self.uploadGlobalSettings()
        names, links = checkFixedOutput()
        self.setGlobalSettings(data, 'anime', 'track-name', names)
        self.setGlobalSettings(data, 'anime', 'track-link', links)
        self.comboTracker()


    def comboTracker(self):
        data = self.uploadGlobalSettings()
        if len(data['anime']['track-name']) > 0:
            for i in enumerate(data['anime']['track-name']):
                self.ui.comboBox_7.addItem(i[1])
                self.ui.comboBox_7.setItemIcon(i[0], QIcon(f'{self.current_path}/icons/animevost.png'))


    def updateClick(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_9.hide()
            print('Yes')
            self.flag = False
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
            data = self.uploadGlobalSettings()
            Thread(target = self.clicker, args=(data,)).start()


    def clicker(self, data, check=True):
        global enable, dead
        self.flag = False
        self.led.value = True
        self.led.setToolTip('Working..')

        if check:
            self.thread_class = ThreadProgress(data, False)
        else:
            self.thread_class = ThreadProgress(data)

        self.thread_class._signal.connect(self.progressCount)
        self.thread_class.start()
        self.thread_class.wait()

        self.flag = True
        dead = False
        self.uploadTrackerAnime()
        sleep(1)
        self.led.value = False
        self.led.setToolTip('Not Working..')
        dead = True
        self.ui.toolButton_12.show()
        self.ui.toolButton_9.show()
        enable = True


    def update(self):
        global enable
        self.timer_check.start(900_000)
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_12.hide()
            print('Yes')
            data = self.uploadGlobalSettings()
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
            Thread(target = self.clicker, args = (data, False)).start()


    def upComboAnime(self):
        data = self.uploadGlobalSettings()
        index = self.ui.comboBox.currentIndex()
        num = float(f"{data['anime']['series'][index]}.{data['anime']['ova'][index]}")
        self.ui.lcdNumber.display(num)


    def timeNumber(self):
        global checker_tag, update_list_anime, enable
        data = self.uploadGlobalSettings()
        self.timer.start(1000)
            
        if data['notify']['notify'] == 'unchecked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notify.png'))
        elif data['notify']['notify'] == 'checked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notification.png'))
        elif data['notify']['notify'] == 'empty':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/bell.png'))
        if enable:
            self.stopMovie()
        self.ui.progressBar.setValue(self.percent)
        self.ui.progressBar_3.setValue(self.percent_all_manga)
        self.ui.progressBar_7.setValue( self.ranobe_percent)
        if checker_tag:
            self.ui.progressBar_2.setValue(self.percent_all_anime)
        else:
            self.percent_all_anime = 0
        if update_list_anime:
            self.ui.comboBox_3.clear()
            self.ui.comboBox.clear()
            self.showed()
            update_list_anime = False
        self.iconTab()


    def iconTab(self):
        index = self.ui.tabWidget.currentIndex()
        self.ui.toolButton_24.setToolTip('https://www.animevost.org\nhttps://www.animevost.am\nhttps://v2.vost.pw/\nChecking site..')
        if self.flag:
            if index == 0:
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost.png'))
                self.tray.setToolTip('AnimeVost checker')
                self.ui.toolButton_24.setToolTip('https://www.animevost.org\nhttps://www.animevost.am\nhttps://v2.vost.pw/\nChecking site..')
            elif index == 1:
                self.tray.setToolTip('Manga checker')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask.png'))
                self.ui.toolButton_24.setToolTip('https://www.manga-chan.me\nhttps://www.readmanga.io\nhttps://www.mintmanga.live\nChecking site,,')
            elif index == 2:
                self.tray.setToolTip('Manga checker')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/ranobe.png'))
                self.ui.toolButton_24.setToolTip('About')
            elif index == 3:
                self.tray.setToolTip('View Anime description')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/a-desc.png'))
                self.ui.toolButton_24.setToolTip('About')
            elif index == 4:
                self.tray.setToolTip('View Manga description')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/m-desc.png'))
                self.ui.toolButton_24.setToolTip('About')
            elif index == 5:
                self.tray.setToolTip('View Ranobe description')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/r-desc.png'))
                self.ui.toolButton_24.setToolTip('About')


    def notifyCheck(self):
        alert = QMessageBox()
        data = self.uploadGlobalSettings()

        if len(data['notify']['anime']) == 0 and len(data['notify']['manga']) == 0 and len(data['notify']['ranobe']) == 0:
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/empty.png'))
            data['notify']['notify'] = 'empty'
            alert.setGeometry(600, 95, 300, 100)
            alert.setText("No notifications..")
        else:
            str_ = []
            if len(data['notify']['anime']) > 0:
                str_.append(''.join(data['notify']['anime']))
            if len(data['notify']['manga']) > 0:
                str_.append(''.join(data['notify']['manga']))
            if len(data['notify']['ranobe']) > 0:
                str_.append(''.join(data['notify']['ranobe']))
            str = "\n".join(str_)
            alert.setGeometry(420, 95, 300, 100)
            alert.setText(str)
            data['notify']['notify'] = 'checked'
        self.setGlobalSettings(data, '', '', '', False, True)
        alert.exec_()


    def modeColorSheme(self):
        data = self.uploadGlobalSettings()
        if self.color % 2 == 0:
            self.changeSheme('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)', 'color: rgb(136, 136, 136)')
            self.ui.toolButton_11.setToolTip(u"Darkmode")
            self.setGlobalSettings(data, '', 'mode', 'darkmode')
        else:
            self.changeSheme('lamp', 'background: rgb(250, 250, 250)', 'background: rgb(220, 220, 220)', 'color: rgb(0, 0, 0)')
            self.ui.toolButton_11.setToolTip(u"Lightmode")
            self.setGlobalSettings(data, '', 'mode', 'lightmode')
        self.color += 1


### << Mode color sheme < Black | White > >> ###
    def changeSheme(self, ico, win, back, color):
        self.ui.toolButton_11.setIcon(QIcon(f'{self.current_path}/icons/{ico}.png'))
        self.setStyleSheet(win)
        self.ui.lineEdit.setStyleSheet(back)
        self.ui.lineEdit_2.setStyleSheet(back)
        self.ui.lineEdit_3.setStyleSheet(back)
        self.ui.textEdit.setStyleSheet(back)
        self.ui.textEdit_2.setStyleSheet(back)
        self.ui.textEdit_3.setStyleSheet(back)
        self.ui.comboBox.setStyleSheet(back)
        self.ui.comboBox_2.setStyleSheet(back)
        self.ui.comboBox_3.setStyleSheet(back)
        self.ui.comboBox_4.setStyleSheet(back)
        self.ui.comboBox_5.setStyleSheet(back)
        self.ui.comboBox_6.setStyleSheet(back)
        self.ui.comboBox_7.setStyleSheet(back)
        self.ui.spinBox.setStyleSheet(back)
        self.ui.doubleSpinBox.setStyleSheet(back)
        self.ui.doubleSpinBox_2.setStyleSheet(back)
        self.ui.lcdNumber.setStyleSheet(back)
        self.ui.lcdNumber_2.setStyleSheet(back)
        self.ui.lcdNumber_3.setStyleSheet(back)
        self.ui.lcdNumber_4.setStyleSheet(back)
        self.ui.lcdNumber_5.setStyleSheet(back)
        self.ui.lcdNumber_6.setStyleSheet(back)
        if ico == 'lamp':
            self.ui.checkBox.setStyleSheet('border-color: #0b76ef; background-color: #0b76ef;')
            self.ui.toolButton_24.setIcon(QIcon(f'{self.current_path}/icons/dark-about.png'))
        elif ico == 'dark':
            self.ui.checkBox.setStyleSheet('border-color: rgb(122, 84, 84); background-color: rgb(122, 84, 84);')
            self.ui.toolButton_24.setIcon(QIcon(f'{self.current_path}/icons/light-about.png'))


# Set Icon for toolButton
    def defaultIcon(self):
        self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/all-click.png'))
        self.ui.toolButton_26.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/click.png'))
        self.ui.toolButton_18.setIcon(QIcon(f'{self.current_path}/icons/web.png'))
        self.ui.tabWidget.setTabIcon(0, QIcon(f'{self.current_path}/icons/animevost.png'))
        self.ui.tabWidget.setTabIcon(1, QIcon(f'{self.current_path}/icons/mask.png'))
        self.ui.tabWidget.setTabIcon(2, QIcon(f'{self.current_path}/icons/ranobe.png'))
        self.ui.tabWidget.setTabIcon(3, QIcon(f'{self.current_path}/icons/a-desc.png'))
        self.ui.tabWidget.setTabIcon(4, QIcon(f'{self.current_path}/icons/m-desc.png'))
        self.ui.tabWidget.setTabIcon(5, QIcon(f'{self.current_path}/icons/r-desc.png'))
        self.ui.toolButton.setIcon(QIcon(f'{self.current_path}/icons/diskette.png'))
        self.ui.toolButton_2.setIcon(QIcon(f'{self.current_path}/icons/trash.png'))
        self.ui.toolButton_3.setIcon(QIcon(f'{self.current_path}/icons/close.png'))
        self.ui.toolButton_6.setIcon(QIcon(f'{self.current_path}/icons/lose.png'))
        self.ui.toolButton_7.setIcon(QIcon(f'{self.current_path}/icons/log.png'))
        self.ui.toolButton_8.setIcon(QIcon(f'{self.current_path}/icons/log-one.png'))
        self.ui.toolButton_9.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_12.setIcon(QIcon(f'{self.current_path}/icons/checking.png'))
        self.ui.toolButton_13.setIcon(QIcon(f'{self.current_path}/icons/log-one.png'))
        self.ui.toolButton_15.setIcon(QIcon(f'{self.current_path}/icons/diskette.png'))
        self.ui.toolButton_32.setIcon(QIcon(f'{self.current_path}/icons/diskette.png'))
        self.ui.toolButton_17.setIcon(QIcon(f'{self.current_path}/icons/checking.png'))
        self.ui.toolButton_31.setIcon(QIcon(f'{self.current_path}/icons/checking.png'))
        self.ui.toolButton_19.setIcon(QIcon(f'{self.current_path}/icons/trash.png'))
        self.ui.toolButton_20.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_21.setIcon(QIcon(f'{self.current_path}/icons/edit.png'))
        self.ui.toolButton_30.setIcon(QIcon(f'{self.current_path}/icons/edit.png'))
        self.ui.toolButton_27.setIcon(QIcon(f'{self.current_path}/icons/log-one.png'))
        self.ui.toolButton_29.setIcon(QIcon(f'{self.current_path}/icons/trash.png'))
        self.ui.toolButton_7.setToolTip(u"Log All parse URL")
        self.ui.toolButton_8.setToolTip(u"Log One parse URL")
        self.ui.toolButton_9.setToolTip(u"Update")
        self.ui.lcdNumber.setToolTip(u"Current Series")


    def check_proc(self):
        proc = popen('ps ax').read()
        if proc.find("chromedriver") == -1:
            return False
        else:
            return True


    def whileStart(self, flag_i):
        global enable, dead
        self.led.value = True
        self.led.setToolTip('Working..')
        if flag_i == 0:
            spin = self.ui.toolButton_20
        elif flag_i == 1:
            spin = self.ui.toolButton_17
        elif flag_i == 3:
            spin = self.ui.toolButton_5
        elif flag_i == 4:
            spin = self.ui.toolButton_4
            # self.ui.toolButton_4.setStyleSheet('border: none; background: transparent; color: gray;')
        while True:
            if dead == False:
                break
            if self.check_proc():
                if flag_i in (3, 4):
                    filename = [f for f in listdir(f'{self.current_path}/downloads') if isfile(path.join(f'{self.current_path}/downloads', f))]
                    if len(filename) > 0:
                        for i in filename:
                            if '.mp4' in i:
                                self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
                                self.tray.setToolTip('Downloading..')
                            else:
                                self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
                                self.tray.setToolTip('Check..')
                    else:
                        self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
                        self.tray.setToolTip('Check..')
            else:
                self.flag = True
                dead = False
                sleep(0.5)

                self.defaultIcon()
                break

        enable = True
        dead = True
        self.flag = True
        self.led.setToolTip('Not Working..')
        self.led.value = False
        spin.show()


    def loging(self):
        alert = QMessageBox()
        text = ''
        data = self.uploadGlobalSettings()
        if len(data['anime']['logs']) != 0:
            for i in data['anime']['logs']:
                text = f'{text}{i}'
            alert.setText(text)
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def logOne(self):
        alert = QMessageBox()
        data = self.uploadGlobalSettings()
        if data['anime']['log'] != '':
            alert.setText(data['anime']['log'])
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def oneDown(self):
        global enable, dead
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_5.hide()
            dead = True
            self.flag = False
            data = self.uploadGlobalSettings()
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
            Thread(target = self.oneParsing, args = (data, data['anime']['urls'][self.ui.comboBox.currentIndex()], self.ui.lcdNumber.intValue()), daemon = True).start()
            Thread(target = self.whileStart, args = (3,)).start()


    def allDown(self):
        global enable, dead
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_4.hide()
            dead = True
            self.flag = False
            data = self.uploadGlobalSettings()
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
            Thread(target = self.allParsing, args = (data,)).start()
            Thread(target = self.whileStart, args = (4, )).start()


    def triggerFocus(self, reason):
        if reason == QSystemTrayIcon.Trigger or reason == QSystemTrayIcon.MiddleClick:
            if self.click % 2 == 0:
                self.setFocus()
                self.show()
            else:
                self.hide()
            self.click += 1


    def closed(self):
        self.extraClose()
        self.stopCheck()
        self.close()


    def saved(self):
        data = self.uploadGlobalSettings()
        series = self.ui.spinBox.value()
        try:
            if self.ui.checkBox.isChecked():
                url = data['anime']['track-link'][self.ui.comboBox_7.currentIndex()]
                self.setGlobalSettings(data, 'anime', 'name', self.ui.comboBox_7.currentText().split(' / ')[0], True)
                self.ui.comboBox.addItem(self.ui.comboBox_7.currentText().split(' / ')[0])
                self.ui.comboBox.setItemIcon(len(data['anime']['name'])-1, QIcon(f'{self.current_path}/icons/animevost.png'))
                self.ui.comboBox_3.addItem(self.ui.comboBox_7.currentText().split(' / ')[0])
                self.ui.comboBox_3.setItemIcon(len(data['anime']['name'])-1, QIcon(f'{self.current_path}/icons/animevost.png'))
            else:
                url = self.ui.lineEdit.text()
                get(url)
                self.ui.comboBox.addItem(url)
                self.setGlobalSettings(data, 'anime', 'name', '', True)
                self.ui.comboBox.setItemIcon(len(data['anime']['name'])-1, QIcon(f'{self.current_path}/icons/animevost.png'))
            self.setGlobalSettings(data, 'anime', 'urls', url, True)
            self.setGlobalSettings(data, 'anime', 'series', series, True)
            self.setGlobalSettings(data, 'anime', 'images', 'icons/animevost.png', True)
            self.setGlobalSettings(data, 'anime', 'description', '', True)
            self.setGlobalSettings(data, 'anime', 'ova', 0, True)

            self.ui.lineEdit.setStyleSheet('background: rgb(98, 255, 59)')
        except Exception as e:
            system(f'notify-send "Error add anime\n{e}"')
            self.ui.lineEdit.setStyleSheet('background: rgb(236, 0, 0)')
            self.ui.lineEdit.setText('  ERROR check URL..')
        Thread(target = self.editLineEdit, args = (self.ui.lineEdit,)).start()


    def showed(self):
        reads = self.uploadGlobalSettings()

        for i in enumerate(reads['anime']['name']):
            self.ui.comboBox.addItem(i[1])
            self.ui.comboBox_3.addItem(i[1])
            self.ui.comboBox.setItemIcon(i[0], QIcon(f'{self.current_path}/icons/animevost.png'))
            self.ui.comboBox_3.setItemIcon(i[0], QIcon(f'{self.current_path}/icons/animevost.png'))

        self.ui.comboBox.setCurrentIndex(0)
        self.ui.comboBox_3.setCurrentIndex(0)
        if len(reads['notify']['anime']) == 0 and len(reads['notify']['manga']) == 0 and len(reads['notify']['ranobe']) == 0:
            self.setGlobalSettings(reads, 'notify', 'notify', 'empty')
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/bell.png'))
        elif reads['notify']['notify'] == 'unchecked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notify.png'))
        elif reads['notify']['notify'] == 'checked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notification.png'))

        if reads['mode'] == 'lightmode':
            self.changeSheme('lamp', 'background: rgb(255, 255, 255)', 'background: rgb(220, 220, 220)', 'color: rgb(0, 0, 0)')
            self.ui.toolButton_11.setToolTip(u"Lightmode")
            self.color = 0
        elif reads['mode'] == 'darkmode':
            self.changeSheme('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)', 'color: rgb(136, 136, 136)')
            self.ui.toolButton_11.setToolTip(u"Darkmode")
            self.color = 1


    def deleted(self):
        index = self.ui.comboBox.currentIndex()
        data = self.uploadGlobalSettings()
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Information)
        alert.setText('Are you sure you want to delete this entry?')
        alert.setGeometry(514, 107, 200, 200)
        alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        rezult = alert.exec()

        if rezult == QMessageBox.Ok:
            del(data['anime']['urls'][index])
            del(data['anime']['series'][index])
            del(data['anime']['ova'][index])
            if data['anime']['images'][index] != 'icons/animevost.png':
                system(f'rm {self.current_path}/{data["anime"]["images"][index]}')
            del(data['anime']['images'][index])
            del(data['anime']['description'][index])
            del(data['anime']['name'][index])

            self.setGlobalSettings(data, '', '', '', False, True)
            self.ui.comboBox.clear()
            self.ui.comboBox_3.clear()
            self.showed()


    def stoped(self):
        self.extraClose()
        self.stopCheck()


    def hidded(self):
        self.hide()
        self.click += 1


####<<< Manga-module >>>####
    def delItem(self):
        index = self.ui.comboBox_2.currentIndex()
        data = self.uploadGlobalSettings()
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Information)
        alert.setText('Are you sure you want to delete this entry?')
        alert.setGeometry(514, 107, 200, 200)
        alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        rezult = alert.exec()

        if rezult == QMessageBox.Ok:
            del(data['manga']['numbers'][index])
            del(data['manga']['urls'][index])

            if data['manga']['images'][index] != 'icons/mask.png':
                system(f"rm {self.current_path}/{data['manga']['images'][index]}")
            del(data['manga']['images'][index])
            del(data['manga']['description'][index])
            del(data['manga']['change_numbers'][index])
            del(data['manga']['names'][index])

            self.setGlobalSettings(data, '', '', '', False, True)
            self.ui.comboBox.clear()
            self.showCombo()


    def checkUpdateItem(self):
        data = self.uploadGlobalSettings()
        value = self.ui.doubleSpinBox.value()
        index = self.ui.comboBox_2.currentIndex()
        if value != 0.0:
            if '.00' in str(value) or '.0' in str(value):
                value = int(value)
            data['manga']['numbers'][index] = value
            while True:
                for i in range(len(data['notify']['manga'])):
                    if f'{self.ui.comboBox_2.currentText()} new chapter {value}' in data['notify']['manga'][i]:
                        del(data['notify']['manga'][i])
                        break
                else:
                    break
            if len(data['notify']['anime']) == 0 and len(data['notify']['manga']) == 0 and len(data['notify']['ranobe']) == 0:
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/empty.png'))
                data['notify']['notify'] = 'empty'
            self.setGlobalSettings(data, '', '', '', False, True)
            self.ui.doubleSpinBox.setValue(0)
            self.updateNumber()


    def loged(self):
        data = self.uploadGlobalSettings()
        text = '\n'.join(data['manga']['logs'])
        alert = QMessageBox()
        alert.setText(text)
        alert.exec_()


    def savedUrl(self):
        url = self.ui.lineEdit_2.text()
        number = self.ui.doubleSpinBox.value()
        data = self.uploadGlobalSettings()

        if check_url(url):
            self.setGlobalSettings(data, 'manga', 'urls', url, True)
            self.setGlobalSettings(data, 'manga', 'numbers', number, True)
            self.setGlobalSettings(data, 'manga', 'change_numbers', 0, True)
            self.setGlobalSettings(data, 'manga', 'images', 'icons/mask.png', True)
            self.setGlobalSettings(data, 'manga', 'names', '', True)
            self.setGlobalSettings(data, 'manga', 'description', '', True)
            self.ui.comboBox_2.addItem(url)
            self.ui.lineEdit_2.setStyleSheet('background: rgb(98, 255, 59)')
        else:
            self.ui.lineEdit_2.setStyleSheet('background: rgb(255, 0, 0)')
            self.ui.lineEdit_2.setText('Write correct url')
        Thread(target = self.editLineEdit, args = (self.ui.lineEdit_2,)).start()


    def currentUpdate(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_17.hide()
            self.flag = False
            data = self.uploadGlobalSettings()
            Thread(target = self.upUrls, args = (data,)).start()
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask-0.png'))
            Thread(target = self.whileStart, args = (1,)).start()


    def upUrls(self, data):
        global dead
        logs = []
        numbers_check = []
        msg = []

        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        try:
            for i in enumerate(data['manga']['urls']):
                if dead == False:
                    break
                index_i = i[0] + 1
                self.percent_all_manga = int(index_i / len(data['manga']['urls']) * 100)
                driver.get(i[1])
                sleep(2)
                if 'https://manga-chan.me' in i[1]:
                    print(i)
                    manga = driver.find_elements_by_class_name('manga2')
                    print(len(manga))
                    manga = manga[0].text
                    manga = manga.split(' Глава ')
                    manga = manga[1].split(' ')
                    manga = manga[0]
                    if '.' in manga:
                        manga = float(manga)
                    else:
                        manga = int(manga)
                else:
                    print(i)
                    manga = driver.find_element_by_class_name('mt-3').text
                    manga = manga.split(' ')
                    if manga[-1].isdigit():
                        manga = int(manga[-1])
                    elif manga[-2].isdigit():
                        manga = int(manga[-2])
                    else:
                        try:
                            manga = float(manga[-1])
                        except:
                            manga = float(manga[-2])

                numbers_check.append(manga)

                if data['manga']['numbers'][i[0]] < manga:
                    current_date = date.today()
                    current_time = strftime("%H:%M", localtime())
                    logs.append(f'{data["manga"]["names"][i[0]]} > {manga}')
                    msg.append(f'[M][{current_date.day}/{current_date.month}/{current_date.year} - {current_time}] > {data["manga"]["names"][i[0]]} new chapter {manga}\n')
                else:
                    logs.append(f'{data["manga"]["names"][i[0]]} = {manga}')
            dead = True
            if len(msg) > 0:
                data['notify']['manga'] += msg
                data['notify']['notify'] = 'unchecked'
                system('notify-send "Вышло кое-что новенькое.."')
            data['manga']['logs'] = logs
            data['manga']['change_numbers'] = numbers_check
            self.setGlobalSettings(data, '', '', '', False, True)
        except Exception as e:
            print('Error ==>\n', e)
            system(f'notify-send "Error check manga\n{e}"')


    def updateClickManga(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_20.hide()
            self.flag = False
            data = self.uploadGlobalSettings()
            Thread(target = self.setUpSelenium, args = (data,)).start()
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask-0.png'))
            Thread(target = self.whileStart, args = (0,)).start()


    def setUpSelenium(self, data):
        global dead        
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        self.percent_all_manga = 0
        for i in enumerate(data['manga']['urls']):
            try:
                if dead == False:
                    break
                index_i = i[0] + 1
                self.percent_all_manga = int(index_i / len(data['manga']['urls']) * 100)
                driver.get(i[1])
                sleep(2)
                if 'https://manga-chan.me' in i[1]:
                    name = driver.find_element_by_class_name('title_top_a').text
                    name = name.split('(')
                    name = name[-1][:-1:]
                    img = driver.find_element_by_id('cover')
                    img = img.get_attribute('src')
                    desc = driver.find_element_by_id('description').text
                else:
                    name = driver.find_element_by_class_name('name').text
                    img = driver.find_elements_by_class_name('fotorama__img')
                    print(img)
                    img = img[0].get_attribute('src')
                    print(img)
                    desc = driver.find_element_by_class_name('manga-description').text

                print(name)
                if 'description/' in data['manga']['images'][i[0]]:
                    pass
                else:
                    image = img.split('/')[-1]
                    print(image)
                    r = get(img, stream=True)
                    if r.status_code == 200:
                        with open(f'{self.current_path}/description/{image}', 'wb') as f:
                            r.raw.decode_content = True
                            copyfileobj(r.raw, f)
                    loadImage(image)
                    data['manga']['images'][i[0]] = f'description/{image}'
                    data['manga']['description'][i[0]] = desc
                data['manga']['names'][i[0]] = name
            except Exception as e:
                print('ERROR ===>\n', e)
                system(f'notify-send "Error update manga\n{e}"')
        self.setGlobalSettings(data, '', '', '', False, True)
        self.ui.comboBox_2.clear()
        self.showCombo()
        driver.quit()
        sleep(2)
        dead = True
        self.percent_all_manga = 0


    def editLineEdit(self, edit):
        sleep(2.5)
        edit.setText('')
        data = self.uploadGlobalSettings()
        if data['mode'] == 'darkmode':
            rgb = 'background: rgb(136, 136, 136)'
        elif data['mode'] == 'lightmode':
            rgb = 'background: rgb(220, 220, 220)'
        edit.setStyleSheet(rgb)


    def showCombo(self):
        data = self.uploadGlobalSettings()
        for i in enumerate(data['manga']['names']):
            self.ui.comboBox_4.addItem(i[1])
            self.ui.comboBox_2.addItem(i[1])
            self.ui.comboBox_2.setItemIcon(i[0], QIcon(f'{self.current_path}/icons/mask.png'))
            self.ui.comboBox_4.setItemIcon(i[0], QIcon(f'{self.current_path}/icons/mask.png'))


    def updateNumber(self):
        data = self.uploadGlobalSettings()
        index = self.ui.comboBox_2.currentIndex()
        self.ui.lcdNumber_2.display(data['manga']['numbers'][index])
        if len(data['manga']['change_numbers']) == 0:
            self.ui.lcdNumber_3.display(index)
        else:
            self.ui.lcdNumber_3.display(data['manga']['change_numbers'][index])
        if data['manga']['change_numbers'][index] == data['manga']['numbers'][index]:
            self.ui.lcdNumber_3.setStyleSheet('background: rgb(50, 233, 37)')
            self.ui.toolButton_21.setEnabled(False)
        else:
            self.ui.toolButton_21.setEnabled(True)
            self.ui.lcdNumber_3.setStyleSheet('background: rgb(192, 16, 16)')


#### <<< Public Function >>> ####
    def openURL(self):
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        if tab == 0:
            mode = 'anime'
            if self.ui.checkBox.isChecked():
                child = 'track-link'
                index = self.ui.comboBox_7.currentIndex()
            else:
                child = 'urls'
                index = self.ui.comboBox.currentIndex()
        if tab == 1:
            mode = 'manga'
            child = 'urls'
            index = self.ui.comboBox_2.currentIndex()
        if tab == 2:
            mode = 'ranobe'
            child = 'urls'
            index = self.ui.comboBox_6.currentIndex()
        if tab == 3:
            mode = 'anime'
            child = 'urls'
            index = self.ui.comboBox_3.currentIndex()
        if tab == 4:
            mode = 'manga'
            child = 'urls'
            index = self.ui.comboBox_4.currentIndex()
        if tab == 5:
            mode = 'ranobe'
            child = 'urls'
            index = self.ui.comboBox_5.currentIndex()
        if len(data[mode]['urls']) > 0:
            open_url(data[mode][child][index])
        else:
            alert = QMessageBox()
            alert.setText(f'List <{mode}> is empty')
            alert.exec_()


#### <<< Tab Anime Description >>> ####
    def viewDescription(self):
        index = self.ui.comboBox_3.currentIndex()
        data = self.uploadGlobalSettings()

        self.ui.label_5.setPixmap(QPixmap(f'{self.current_path}/{data["anime"]["images"][index]}'))
        self.ui.textEdit.setHtml(data['anime']['description'][index])


#### <<< Tab Manga Description >>> ####
    def viewDescriptionManga(self):
        index = self.ui.comboBox_4.currentIndex()
        data = self.uploadGlobalSettings()

        self.ui.label_6.setPixmap(QPixmap(f'{self.current_path}/{data["manga"]["images"][index]}'))
        self.ui.textEdit_2.setHtml(data['manga']['description'][index])


#### <<< Tab Ranobe Description >>> ####
    def viewDescriptionRanobe(self):
        index = self.ui.comboBox_5.currentIndex()
        data = self.uploadGlobalSettings()

        self.ui.label_7.setPixmap(QPixmap(f'{self.current_path}/{data["ranobe"]["images"][index]}'))
        self.ui.textEdit_3.setHtml(data['ranobe']['description'][index])


#### <<< Tab Ranobe >>> ####
    def saveRanobeUrl(self):
        url = self.ui.lineEdit_3.text()
        chapter = self.ui.doubleSpinBox_2.value()
        data = self.uploadGlobalSettings()
        try:
            get(url)
            self.ui.comboBox_6.addItem(url)
            self.ui.comboBox_5.addItem(url)
            self.setGlobalSettings(data, 'ranobe', 'urls', url, True)
            self.setGlobalSettings(data, 'ranobe', 'images', 'icons/ranobe.png', True)
            self.setGlobalSettings(data, 'ranobe', 'description', '', True)
            self.setGlobalSettings(data, 'ranobe', 'names', '', True)
            self.setGlobalSettings(data, 'ranobe', 'chapters', chapter, True)
            self.setGlobalSettings(data, 'ranobe', 'future-chapters', 0, True)
            self.setGlobalSettings(data, 'ranobe', 'access-chapters', 0, True)
            self.ui.lineEdit_3.setStyleSheet('background: rgb(98, 255, 59)')
        except Exception as e:
            system(f'notify-send "Error add new url <ranobe>\n{e}"')
        Thread(target = self.editLineEdit, args = (self.ui.lineEdit_3,)).start()


    def delItemRanobe(self):
        index = self.ui.comboBox_6.currentIndex()
        data = self.uploadGlobalSettings()
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Information)
        alert.setText('Are you sure you want to delete this entry?')
        alert.setGeometry(514, 107, 200, 200)
        alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        rezult = alert.exec()

        if rezult == QMessageBox.Ok:
            del(data['ranobe']['chapters'][index])
            del(data['ranobe']['urls'][index])

            if data['ranobe']['images'][index] != 'icons/ranobe.png':
                system(f"rm {self.current_path}/{data['ranobe']['images'][index]}")
            del(data['ranobe']['images'][index])
            del(data['ranobe']['description'][index])
            del(data['ranobe']['names'][index])
            del(data['ranobe']['access-chapters'][index])
            del(data['ranobe']['future-chapters'][index])
    
            self.setGlobalSettings(data, '', '', '', False, True)
            self.viewRanobe()


    def setRanobe(self, check):
        global enable, dead
        dead = True
        data = self.uploadGlobalSettings()
        names = []
        images = []
        descs = []
        chapters = []
        all_chapters = []
        msg = 0
        self.ranobe_percent = 0
        try:
            for i in enumerate(data['ranobe']['urls']):
                print(i)
                if dead == False:
                    raise Exception('extra Close update Ranobe')
                name, img, description, chapter, all = parseRanobe(i[1])
                names.append(name)
                image = img.split('/')[-1]
                images.append(f'description/{image}')
                if data['ranobe']['chapters'][i[0]] < float(chapter):
                    current_date = date.today()
                    current_time = strftime("%H:%M", localtime())
                    msg += 1

                    self.setGlobalSettings(data, 'notify', 'ranobe', f'[R][{current_date.day}/{current_date.month}/{current_date.year} - {current_time}] > {name} - new chapter {chapter}\n', True)

                if check == False:
                    r = get(img, stream=True)
                    if r.status_code == 200:
                        with open(f'{self.current_path}/description/{image}', 'wb') as f:
                            r.raw.decode_content = True
                            copyfileobj(r.raw, f)

                    loadImage(image)
                descs.append(description)
                chapters.append(chapter)
                all_chapters.append(all)
                self.ranobe_percent = int((i[0] + 1) / len(data['ranobe']['urls']) * 100)
            if msg > 0:
                system('notify-send "Вышло кое-что новенькое.."')
                self.setGlobalSettings(data, 'notify', 'notify', 'unchecked')
            if check == False:
                self.setGlobalSettings(data, 'ranobe', 'names', names)
                self.setGlobalSettings(data, 'ranobe', 'images', images)
                self.setGlobalSettings(data, 'ranobe', 'description', descs)
            self.setGlobalSettings(data, 'ranobe', 'access-chapters', chapters)
            self.setGlobalSettings(data, 'ranobe', 'future-chapters', all_chapters)
            sleep(2.5)
            self.ranobe_percent = 0
            self.viewRanobe()
            dead = True
            self.setGlobalSettings(data, 'ranobe', 'log', '')
        except Exception as e:
            log = f'Error ==>\n{e}' 
            self.setGlobalSettings(data, 'ranobe', 'log', log)
            system(f'notify-send "Error for get data about <ranobe>\n{e}"')
        self.ui.toolButton_26.show()
        self.ui.toolButton_31.show()
        self.viewRanobe()
        enable = True


    def viewRanobe(self):
        self.ui.comboBox_5.clear()
        self.ui.comboBox_6.clear()
        data = self.uploadGlobalSettings()
        if len(data['ranobe']['names']) > 0:
            for i in data['ranobe']['names']:
                self.ui.comboBox_6.addItem(i)
                self.ui.comboBox_5.addItem(i)
        else:
            for i in data['ranobe']['urls']:
                self.ui.comboBox_5.addItem(i)
                self.ui.comboBox_6.addItem(i)


    def upComboRanobe(self):
        data = self.uploadGlobalSettings()
        index = self.ui.comboBox_6.currentIndex()
        self.ui.lcdNumber_4.display(data['ranobe']['chapters'][index])
        if len(data['ranobe']['access-chapters']) > 0:
            self.ui.lcdNumber_5.display(data['ranobe']['access-chapters'][index])
            self.ui.lcdNumber_6.display(data['ranobe']['future-chapters'][index])
        else:
            self.ui.lcdNumber_5.display(0)
            self.ui.lcdNumber_6.display(0)


    def logRanobe(self):
        data = self.uploadGlobalSettings()
        alert = QMessageBox()
        alert.setGeometry(600, 95, 300, 100)
        if data['ranobe']['log'] == '':
            alert.setText('No Log..')
        else:
            alert.setText(data['ranobe']['log'])
        alert.exec_()


    def updateItemRanobe(self):
        data = self.uploadGlobalSettings()
        value = self.ui.doubleSpinBox_2.value()
        index = self.ui.comboBox_6.currentIndex()
        if value != 0.0:
            decimal = int(str(value).split('.')[1])
            if decimal == 0:
                value = int(value)
            data['ranobe']['chapters'][index] = value
            while True:
                for i in range(len(data['notify']['ranobe'])):
                    if f'{self.ui.comboBox_6.currentText()} - new chapter {value}' in data['notify']['ranobe'][i]:
                        del(data['notify']['ranobe'][i])
                        break
                else:
                    break
            if len(data['notify']['anime']) == 0 and len(data['notify']['manga']) == 0 and len(data['notify']['ranobe']) == 0:
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/empty.png'))
                data['notify']['notify'] = 'empty'
            self.setGlobalSettings(data, '', '', '', False, True)
            self.ui.doubleSpinBox_2.setValue(0)
            self.upComboRanobe()


    def updateRanobeUrl(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_26.hide()
            Thread(target = self.setRanobe, args = (False,)).start()


    def checkRanobeUrl(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_31.hide()
            Thread(target = self.setRanobe, args = (True,)).start()


app = QtWidgets.QApplication([])
application = myWindow()

exit(app.exec())
