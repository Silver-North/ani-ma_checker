#!/usr/bin/env python3


from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox, QSystemTrayIcon
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import QTimer, QThread, pyqtSignal
from design import Ui_MainWindow
from sys import exit
from socket import setdefaulttimeout
from requests import get
from selenium import webdriver
from shutil import copyfileobj
from urllib import request as url_request
from genericpath import isfile
from webbrowser import open as open_url
from os import listdir, path, popen, system, rename
from time import sleep, localtime, strftime
from threading import Thread
from notifications import checkURL, getDescription, loadImage
from json import dumps, load
from pyttsx3 import init
from datetime import date
from validators import url as check_url


dead = True
checker_tag = True


class ThreadProgress(QThread):
    _signal = pyqtSignal(int)
    def __init__(self, flag=True):
        super(ThreadProgress, self).__init__()
        self.flag = flag
        self.current_path = path.dirname(path.realpath(__file__))
        self.check = 0


    def __del__(self):
        self.wait()


    def uploadGlobalSettings(self):
        with open(f'{self.current_path}/setting.json', 'r') as reads:
            data = load(reads)
        return data


    def run(self):
        global dead, checker_tag
        checker_tag = False
        dead = True
        data = self.uploadGlobalSettings()
        name = []
        for i in enumerate(data['anime']['urls']):
            if not dead:
                break
            series = data['anime']['series'][i[0]] + 1
            if self.flag:
                self.check = checkURL(i[1], series, True)
            else:
                name.append(checkURL(i[1], series))
            index = i[0] + 1
            percent = int(index / len(data['anime']['urls']) * 100)
            self._signal.emit(percent)
        if self.check > 0:
            tts = init()
            tts.say("Something new came out... check the natification log...")
            tts.runAndWait()
            system('notify-send "Вышло кое-что новенькое!!!"')
        self.check = 0
        if not self.flag:
            data['anime']['name'] = name
            with open(f'{self.current_path}/setting.json', 'w') as js:
                js.write(f"{dumps(data, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")

        sleep(1)
        percent = 0
        self._signal.emit(percent)
        
        checker_tag = True
        print(True)


class myWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(myWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setFocus()
        self.setGeometry(480, 55, 400, 300)

        self.flag = True
        self.f_flag = True
        self.check_flag = False
        self.click = 0
        self.percent = 0
        self.percent_all_anime = 0
        self.percent_all_manga = 0
        self.percent_desc_manga = 0
        self.percent_desc_anime = 0
        self.color = 0
        self.path_down = f'{path.dirname(path.realpath(__file__))}/downloads'
        self.prefs = {'download.default_directory': self.path_down, "download.prompt_for_download": False}

        self.timer = QTimer()
        self.timer.timeout.connect(self.timeNumber)
        
        self.ui.progressBar.setStyleSheet('selection-background-color: #00e916; background-image: linear-gradient(160deg, #00e916 0%, #3dffe9 75%);')
        self.ui.progressBar_2.setStyleSheet('selection-background-color: #8BC6EC; background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);')
        self.ui.progressBar_3.setStyleSheet('selection-background-color: #FFE53B; background-image: linear-gradient(22deg, #FFE53B 0%, #FF2525 82%);')
        self.ui.progressBar_4.setStyleSheet('selection-background-color: #8BC6EC; background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);')
        self.ui.progressBar_5.setStyleSheet('selection-background-color: #FF3CAC; background-image: linear-gradient(219deg, #FF3CAC 4%, #784BA0 44%, #2B86C5 100%);')

        self.ui.toolButton_24.setStyleSheet('border: none; background: transparent; color: gray;')

        self.current_path = path.dirname(path.realpath(__file__))

        self.tray = QSystemTrayIcon(self)
        self.tray.activated.connect(self.triggerFocus)
        self.tray.show()

        self.timeNumber()
        self.defaultIcon()
        # self.downProgress()

        self.showed()
        self.showCombo()
        self.viewDescription()
        self.updateNumber()
        self.upComboAnime()
        self.viewDescriptionManga()
        self.ui.comboBox.activated[str].connect(self.upComboAnime)
        self.ui.comboBox_2.activated[str].connect(self.updateNumber)
        self.ui.comboBox_3.activated[str].connect(self.viewDescription)
        self.ui.comboBox_4.activated[str].connect(self.viewDescriptionManga)

        name = date.today().strftime("%A")
        if name == "Monday" or name == "Понедельник":
            with open(f'{self.current_path}/notify.txt', 'w') as clear:
                clear.write('')
        print(name)

        self.timer_check = QTimer()
        self.timer_check.timeout.connect(self.update)
        self.update()
        self.ui.tabWidget.setCurrentIndex(0)
#### << Maiin-module >> ####
        self.ui.toolButton_3.clicked.connect(self.closed)
        self.ui.toolButton_11.clicked.connect(self.modeColorSheme)
        self.ui.toolButton_18.clicked.connect(self.hidded)
#### << Anime-module >> ####
        self.ui.toolButton.clicked.connect(self.saved)
        self.ui.toolButton_2.clicked.connect(self.deleted)
        self.ui.toolButton_4.clicked.connect(self.allDown)
        self.ui.toolButton_5.clicked.connect(self.oneDown)
        self.ui.toolButton_6.clicked.connect(self.stoped)
        self.ui.toolButton_7.clicked.connect(self.loging)
        self.ui.toolButton_8.clicked.connect(self.logOne)
        self.ui.toolButton_9.clicked.connect(self.updateClick)
        self.ui.toolButton_10.clicked.connect(self.notifyCheck)
        self.ui.toolButton_12.clicked.connect(self.update)
        self.ui.toolButton_16.clicked.connect(self.openURLAnime)
#### << Manga-module >> ####
        self.ui.toolButton_13.clicked.connect(self.loged)
        self.ui.toolButton_14.clicked.connect(self.openURLManga)
        self.ui.toolButton_15.clicked.connect(self.savedUrl)
        self.ui.toolButton_17.clicked.connect(self.currentUpdate)
        self.ui.toolButton_19.clicked.connect(self.delItem)
        self.ui.toolButton_20.clicked.connect(self.updateClickManga)
        self.ui.toolButton_21.clicked.connect(self.checkUpdateItem)
#### <<< View Anime-description module >> ####
        self.ui.toolButton_22.clicked.connect(self.uploadDescription)
#### <<< View Manga-description module >> ####
        self.ui.toolButton_23.clicked.connect(self.uploadDescriptionManga)


    def keyPressEvent(self, QKeyEvent):
        int_key = QKeyEvent.key()
        print(int_key)
        if int_key == 16777216:
            self.hidded()
            self.click += 1


    def uploadGlobalSettings(self):
        with open(f'{self.current_path}/setting.json', 'r') as reads:
            data = load(reads)
        return data


    def setGlobalSettings(self, to_json: dict, tab, mode: str, var, flag=False, state=False):
        if state:
            pass
        else:
            if flag:
                if tab == "":
                    to_json[mode].append(var)
                else:
                    to_json[tab][mode].append(var)
            else:
                if tab == '':
                    to_json[mode] = var
                else:
                    to_json[tab][mode] = var
        with open(f'{self.current_path}/setting.json', 'w') as js:
            js.write(f"{dumps(to_json, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")


    def allParsing(self):
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        option.add_experimental_option("prefs", self.prefs)
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        url, numbers = self.listLinkOrNumbers()
        logs = []
        if len(url) > 0:
            for i in enumerate(url):
                index_i = i[0] + 1
                self.percent_all_anime = int(index_i / len(url) * 100)
                self.ui.progressBar_2.setToolTip(f'check - {index_i}/{len(url)}..')
                try:
                    series = numbers[i[0]] + 1
                    print(i)
                    driver.get(i[1])
                    print(0)
                    sleep(3)
                    search_count_series = driver.find_elements_by_class_name('epizode')
                    name = driver.find_element_by_class_name('shortstoryHead').text
                    next = driver.find_element_by_class_name('next')
                    name_dir = name.split(' /')

                    print(name_dir[0])

                    if len(search_count_series) == series:
                        if len(search_count_series) > 6:
                            next.click()
                            if len(search_count_series) > 12:
                                next.click()
                                if len(search_count_series) > 18:
                                    next.click()
                                    if len(search_count_series) > 24:
                                        next.click()
                        search_count_series[-1].click()
                        sleep(15)
                        frame = driver.find_elements_by_tag_name('iframe')
                        if len(frame) == 4:
                            driver.switch_to.frame(frame[-2])
                        elif len(frame) == 3:
                            driver.switch_to.frame(frame[-1])
                        sleep(3)
                        down = driver.find_elements_by_class_name('butt')
                        let = down[-2].get_attribute("href").split('?')
                        let = let[0].split('/')
                        sleep(3)
                        print(100)
                        self.check_flag = False
                        self.Download(down[2].get_attribute('href'), let[-1], url, name_dir[0], i[1], name, series, numbers)
                        logs.append(f'{i[0]} - {name_dir[0]} - New series {series}\n')
                    else:
                        logs.append(f'{i[0]} - {name_dir[0]} - No new < {series} > series\n')
                    driver.switch_to.default_content()
                    sleep(5)
                except Exception as e:
                    logs.append(f'{i[0]} - !!! << Error: {e} >> !!!\n')

        driver.quit()

        data = self.uploadGlobalSettings()
        data['anime']['logs'] = logs
        self.setGlobalSettings(data, 'anime', 'logs', logs)
        sleep(3)
        self.ui.progressBar_2.setToolTip(f'Progress Checking..')
        self.percent_all_anime = 0


    def listLinkOrNumbers(self):
        with open(f'{self.current_path}/setting.json', 'r') as reads:
            data = load(reads)
        return data['anime']['urls'], data['anime']['series']


    def oneParsing(self, url, digit):
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        option.add_experimental_option("prefs", self.prefs)
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        urls, numbers = self.listLinkOrNumbers()
        log = ''
        try:
            series = digit + 1
            print(url)
            driver.get(url)
            print(0)
            sleep(3)
            search_count_series = driver.find_elements_by_class_name('epizode')
            name = driver.find_element_by_class_name('shortstoryHead').text
            next = driver.find_element_by_class_name('next')
            name_dir = name.split(' /')

            print(name_dir[0], len(search_count_series))

            if len(search_count_series) == series:
                if len(search_count_series) > 6:
                    next.click()
                    if len(search_count_series) > 12:
                        next.click()
                        if len(search_count_series) > 18:
                            next.click()
                            if len(search_count_series) > 24:
                                next.click()
                print(search_count_series[-1].text)
                search_count_series[-1].click()
                sleep(15)
                frame = driver.find_elements_by_tag_name('iframe')
                if len(frame) == 4:
                    driver.switch_to.frame(frame[-2])
                elif len(frame) == 3:
                    driver.switch_to.frame(frame[-1])
                sleep(3)
                down = driver.find_elements_by_class_name('butt')
                let = down[-2].get_attribute("href").split('?')
                let = let[0].split('/')
                sleep(3)
                print(down[2].get_attribute('href'))
                self.check_flag = False
                self.Download(down[2].get_attribute('href'), let[-1], urls, name_dir[0], url, name, series, numbers)
                log = f'{name_dir[0]} - New series {series}'
            else:
                log = f'{name_dir[0]} - No new < {series} > series'
            driver.switch_to.default_content()
        except Exception as e:
            driver.quit()
            log = f"!!! << Error: {e} >> !!!"

        driver.quit()
        data = self.uploadGlobalSettings()
        data['anime']['log'] = log
        self.setGlobalSettings(data, 'anime', 'log', log)


    def checkUpload(self, f, url, dir, link, name, series, numbers):
        if path.exists(path.join(f'{path.dirname(__file__)}/downloads', f'_{f}')):
            curent_time = strftime("%H:%M", localtime())
            system(f'notify-send "Вышла новая серия!{name}\n{curent_time}"')
            names_dir = '_'.join(dir.split())
            old = path.join(f'{path.dirname(__file__)}/downloads', f'_{f}')
            new = path.join(f'{path.dirname(__file__)}/downloads', f'{names_dir}-{series}.mp4')

            rename(old, new)

            if not path.isdir(f'/home/north/data/projects/Python/IsDev/Anime-parser/downloads/'):
                system(f'mkdir "/home/north/data/projects/Python/IsDev/Anime-parser/downloads/"')

            if path.isdir(f'/home/north/data/projects/Python/IsDev/Anime-parser/downloads/{names_dir}'):
                pass
            else:
                system(f'mkdir "/home/north/data/projects/Python/IsDev/Anime-parser/downloads/{names_dir}"')

            system(f'mv "{self.path_down}/{names_dir}-{series}.mp4" "{self.path_down}/{names_dir}/"')

            data = self.uploadGlobalSettings()
            data['anime']['series'][url.index(link)] = series
            self.setGlobalSettings(data, 'anime', 'series', data['anime']['series'])
        else:
            print('Wait!! Reconnect!!')
            sleep(5)
            self.checkUpload(f, url, dir, link, name, series, numbers)


    def handleProgress(self, blocknum, blocksize, totalsize):
        global dead
        readed_data = blocknum * blocksize
        if totalsize > 0:
            download_percentage = readed_data * 100 / totalsize
            self.percent = int(download_percentage)
            if dead == False:
                raise Exception("Sorry, no numbers below zero")
            QtWidgets.QApplication.processEvents()


    def Download(self, down, f, urls, dir, link, name, series, numbers):
        global dead
        dead = True
        save_loc = f'{self.current_path}/downloads/_{f}'
        try:
            self.ui.progressBar.setToolTip(f'Download:\n{dir} -> {series}')
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
            url_request.urlretrieve(down, save_loc, self.handleProgress)
            self.checkUpload(f, urls, dir, link, name, series, numbers)
        except Exception as e:
            system(f'rm {self.current_path}/downloads/_{f}')
            dead = True
            print('Error: ==>\n', e)
            self.ui.progressBar.setToolTip(f'Error download\n{dir} -> {series}')


    def extraClose(self):
        global dead
        dead = False
        system('killall chromedriver')


    def progressCount(self, percent):
        self.ui.progressBar_2.setValue(percent)


    def stopCheck(self):
        self.thread_class.quit()
        self.f_flag = False


    def openURLAnime(self):
        index = self.ui.comboBox.currentIndex()
        data = self.uploadGlobalSettings()
        open_url(data['anime']['urls'][index])


    def updateClick(self):
        print('Yes')
        self.flag = False
        self.ui.toolButton_5.setEnabled(False)
        self.ui.toolButton_4.setEnabled(False)
        self.ui.toolButton_12.setEnabled(False)
        self.ui.toolButton_17.setEnabled(False)
        self.ui.toolButton_20.setEnabled(False)
        self.ui.toolButton_22.setEnabled(False)
        self.ui.toolButton_23.setEnabled(False)
        self.ui.toolButton_9.setEnabled(False)
        self.ui.toolButton_9.setIcon(QIcon(f'{self.current_path}/icons/list.png'))
        self.ui.toolButton_9.setToolTip(u"Checking..")
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
        Thread(target = self.clicker).start()


    def clicker(self, check=True):
        self.flag = False
        if check:
            self.thread_class = ThreadProgress(False)
        else:
            self.thread_class = ThreadProgress()
        self.thread_class._signal.connect(self.progressCount)
        self.thread_class.start()
        self.thread_class.wait()

        self.flag = True
        self.ui.toolButton_12.setEnabled(True)
        self.ui.toolButton_9.setEnabled(True)
        self.ui.toolButton_5.setEnabled(True)
        self.ui.toolButton_17.setEnabled(True)
        self.ui.toolButton_22.setEnabled(True)
        self.ui.toolButton_20.setEnabled(True)
        self.ui.toolButton_23.setEnabled(True)
        self.ui.toolButton_4.setEnabled(True)
        self.defaultIcon()


    def update(self):
        print('Yes')
        self.timer_check.start(900_000)
        if self.ui.toolButton_12.isEnabled() == False:
            pass
        else:
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
            Thread(target = self.clicker, args = (False,)).start()
        self.ui.toolButton_5.setEnabled(False)
        self.ui.toolButton_12.setEnabled(False)
        self.ui.toolButton_9.setEnabled(False)
        self.ui.toolButton_17.setEnabled(False)
        self.ui.toolButton_22.setEnabled(False)
        self.ui.toolButton_20.setEnabled(False)
        self.ui.toolButton_23.setEnabled(False)
        self.ui.toolButton_4.setEnabled(False)


    def upComboAnime(self):
        data = self.uploadGlobalSettings()
        self.ui.lcdNumber.display(data['anime']['series'][self.ui.comboBox.currentIndex()])


    def timeNumber(self):
        global checker_tag
        data = self.uploadGlobalSettings()
        self.timer.start(1000)
        if data['anime']['notify'] == 'unchecked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notify.png'))
        elif data['anime']['notify'] == 'checked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/bell.png'))
        self.ui.progressBar.setValue(self.percent)
        self.ui.progressBar_3.setValue(self.percent_all_manga)
        self.ui.progressBar_4.setValue(self.percent_desc_anime)
        self.ui.progressBar_5.setValue(self.percent_desc_manga)
        if checker_tag:
            self.ui.progressBar_2.setValue(self.percent_all_anime)
        else:
            self.percent_all_anime = 0
        self.iconTab()
        # self.downProgress()


    def iconTab(self):
        index = self.ui.tabWidget.currentIndex()
        self.ui.toolButton_24.setToolTip('https://www.animevost.org\nhttps://www.animevost.am\nChecking site..')
        if self.flag:
            if index == 0:
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost.png'))
                self.tray.setToolTip('Anime checker')
                self.ui.toolButton_24.setToolTip('https://www.animevost.org\nhttps://www.animevost.am\nChecking site..')
            elif index == 1:
                self.tray.setToolTip('Manga checker')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask.png'))
                self.ui.toolButton_24.setToolTip('https://www.manga-chan.me\nhttps://www.readmanga.io\nhttps://www.mintmanga.live\nChecking site,,')
            elif index == 2:
                self.tray.setToolTip('View Anime description')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/view.png'))
                self.ui.toolButton_24.setToolTip('About')
            elif index == 3:
                self.tray.setToolTip('View Manga description')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/view.png'))
                self.ui.toolButton_24.setToolTip('About')


    def notifyCheck(self):
        alert = QMessageBox()
        datas = self.uploadGlobalSettings()
        if path.exists(path.join(path.dirname(__file__), 'notify.txt')):
            with open(f'{self.current_path}/notify.txt', 'r') as f:
                data = f.readlines()

            if len(data) == 0:
                alert.setGeometry(600, 95, 300, 100)
                alert.setText("No notifications..")
            else:
                str = ''.join(data)
                alert.setGeometry(420, 95, 300, 100)
                alert.setText(str)
                self.setGlobalSettings(datas, 'anime', 'notify', 'checked')
        else:
            alert.setText('No log file..')
        alert.exec_()


    def modeColorSheme(self):
        data = self.uploadGlobalSettings()
        if self.color % 2 == 0:
            self.changeSheme('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)', 'color: rgb(136, 136, 136)')
            self.ui.toolButton_11.setToolTip(u"Darkmode")
            self.setGlobalSettings(data, '', 'mode', 'darkmode')
        else:
            self.changeSheme('lamp', 'background: rgb(255, 255, 255)', 'background: rgb(220, 220, 220)', 'color: rgb(0, 0, 0)')
            self.ui.toolButton_11.setToolTip(u"Lightmode")
            self.setGlobalSettings(data, '', 'mode', 'lightmode')
        self.color += 1


### << Mode color sheme < Black | White > >> ###
    def changeSheme(self, ico, win, back, color):
        self.ui.toolButton_11.setIcon(QIcon(f'{self.current_path}/icons/{ico}.png'))
        self.setStyleSheet(win)
        self.ui.lineEdit.setStyleSheet(back)
        self.ui.textEdit.setStyleSheet(back)
        self.ui.textEdit_2.setStyleSheet(back)
        self.ui.lineEdit_2.setStyleSheet(back)
        self.ui.comboBox.setStyleSheet(back)
        self.ui.comboBox_2.setStyleSheet(back)
        self.ui.comboBox_3.setStyleSheet(back)
        self.ui.comboBox_4.setStyleSheet(back)
        self.ui.spinBox.setStyleSheet(back)
        self.ui.doubleSpinBox.setStyleSheet(back)
        self.ui.lcdNumber.setStyleSheet(back)
        self.ui.lcdNumber_2.setStyleSheet(back)
        self.ui.lcdNumber_3.setStyleSheet(back)
        if ico == 'lamp':
            self.ui.toolButton_24.setIcon(QIcon(f'{self.current_path}/icons/dark-about.png'))
        elif ico == 'dark':
            self.ui.toolButton_24.setIcon(QIcon(f'{self.current_path}/icons/light-about.png'))


# Set Icon for toolButton
    def defaultIcon(self):
        self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/all-click.png'))
        self.ui.toolButton_22.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_23.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_14.setIcon(QIcon(f'{self.current_path}/icons/web.png'))
        self.ui.toolButton_16.setIcon(QIcon(f'{self.current_path}/icons/web.png'))
        self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/click.png'))
        self.ui.toolButton_18.setIcon(QIcon(f'{self.current_path}/icons/hide.png'))
        self.ui.tabWidget.setTabIcon(0, QIcon(f'{self.current_path}/icons/animevost.png'))
        self.ui.tabWidget.setTabIcon(1, QIcon(f'{self.current_path}/icons/mask.png'))
        self.ui.tabWidget.setTabIcon(2, QIcon(f'{self.current_path}/icons/a-desc.png'))
        self.ui.tabWidget.setTabIcon(3, QIcon(f'{self.current_path}/icons/m-desc.png'))
        self.ui.toolButton.setIcon(QIcon(f'{self.current_path}/icons/diskette.png'))
        self.ui.toolButton_2.setIcon(QIcon(f'{self.current_path}/icons/trash.png'))
        self.ui.toolButton_3.setIcon(QIcon(f'{self.current_path}/icons/close.png'))
        self.ui.toolButton_6.setIcon(QIcon(f'{self.current_path}/icons/lose.png'))
        self.ui.toolButton_7.setIcon(QIcon(f'{self.current_path}/icons/log.png'))
        self.ui.toolButton_8.setIcon(QIcon(f'{self.current_path}/icons/log-one.png'))
        self.ui.toolButton_9.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_12.setIcon(QIcon(f'{self.current_path}/icons/checking.png'))
        self.ui.toolButton_13.setIcon(QIcon(f'{self.current_path}/icons/log-one.png'))
        self.ui.toolButton_15.setIcon(QIcon(f'{self.current_path}/icons/diskette.png'))
        self.ui.toolButton_17.setIcon(QIcon(f'{self.current_path}/icons/checking.png'))
        self.ui.toolButton_19.setIcon(QIcon(f'{self.current_path}/icons/trash.png'))
        self.ui.toolButton_20.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_21.setIcon(QIcon(f'{self.current_path}/icons/edit.png'))
        self.ui.toolButton_7.setToolTip(u"Log All parse URL")
        self.ui.toolButton_8.setToolTip(u"Log One parse URL")
        self.ui.toolButton_9.setToolTip(u"Update")
        self.ui.lcdNumber.setToolTip(u"Current Series")


    def check(self):
        proc = popen('ps ax').read()
        if proc.find("chromedriver") == -1:
            return False
        else:
            return True


    def whileStart(self):
        while True:
            if self.check():
                filename = [f for f in listdir(f'{self.current_path}/downloads') if isfile(path.join(f'{self.current_path}/downloads', f))]
                if len(filename) > 0:
                    for i in filename:
                        if '.mp4.crdownload' in i or '.mp4' in i:
                            self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
                            self.tray.setToolTip('Downloading..')
                        else:
                            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
                            self.tray.setToolTip('Check..')
                else:
                    self.tray.setToolTip('Check..')
                    self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
                self.ui.toolButton_5.setEnabled(False)
                self.ui.toolButton_17.setEnabled(False)
                self.ui.toolButton_20.setEnabled(False)
                self.ui.toolButton_23.setEnabled(False)
                self.ui.toolButton_22.setEnabled(False)
                self.ui.toolButton_4.setEnabled(False)
                self.ui.toolButton_12.setEnabled(False)
                self.ui.toolButton_9.setEnabled(False)
            else:
                self.defaultIcon()
                self.flag = True
                self.upComboAnime()
                self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/all-click.png'))
                self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/click.png'))
                self.ui.toolButton_17.setEnabled(True)
                self.ui.toolButton_20.setEnabled(True)
                self.ui.toolButton_22.setEnabled(True)
                self.ui.toolButton_12.setEnabled(True)
                self.ui.toolButton_5.setEnabled(True)
                self.ui.toolButton_23.setEnabled(True)
                self.ui.toolButton_4.setEnabled(True)
                self.ui.toolButton_9.setEnabled(True)
                break
            sleep(1)


    def loging(self):
        alert = QMessageBox()
        text = ''
        data = self.uploadGlobalSettings()
        if len(data['anime']['logs']) != 0:
            for i in data['anime']['logs']:
                text = f'{text}{i}'
            alert.setText(text)
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def logOne(self):
        alert = QMessageBox()
        data = self.uploadGlobalSettings()
        if data['anime']['log'] != '':
            alert.setText(data['anime']['log'])
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def oneDown(self):
        self.flag = False
        data = self.uploadGlobalSettings()
        self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/spinner.png'))
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
        Thread(target = self.oneParsing, args = (data['anime']['urls'][self.ui.comboBox.currentIndex()], self.ui.lcdNumber.intValue()), daemon = True).start()
        Thread(target = self.whileStart).start()


    def allDown(self):
        self.flag = False
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
        self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/spinner.png'))
        Thread(target = self.allParsing).start()
        Thread(target = self.whileStart).start()


    def triggerFocus(self, reason):
        if reason == QSystemTrayIcon.Trigger:
            if self.click % 2 == 0:
                self.setFocus()
                self.show()
            else:
                self.hide()
            self.click += 1
        # elif reason == QSystemTrayIcon.MiddleClick:


    def closed(self):
        self.extraClose()
        self.stopCheck()
        self.close()


    def saved(self):
        url = self.ui.lineEdit.text()
        series = self.ui.spinBox.value()
        try:
            get(url)
            data = self.uploadGlobalSettings()
            self.setGlobalSettings(data, 'anime', 'urls', url, True)
            self.setGlobalSettings(data, 'anime', 'series', series, True)
            self.ui.comboBox.addItem(url)
        except:
            alert = QMessageBox()
            alert.setText(f"URL does not exist on Internet")
            alert.exec_()
            self.ui.lineEdit.setText('')


    def showed(self):
        reads = self.uploadGlobalSettings()

        for i in reads['anime']['name']:
            self.ui.comboBox_3.addItem(i)

        for i in reads['anime']['name']:
            self.ui.comboBox.addItem(i)

        if path.exists(path.join(path.dirname(__file__), 'notify.txt')):
            if reads['anime']['notify'] == 'unchecked':
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notify.png'))
            elif reads['anime']['notify'] == 'checked':
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/bell.png'))

        if reads['mode'] == 'lightmode':
            self.changeSheme('lamp', 'background: rgb(255, 255, 255)', 'background: rgb(220, 220, 220)', 'color: rgb(0, 0, 0)')
            self.ui.toolButton_11.setToolTip(u"Lightmode")
            self.color = 0
        elif reads['mode'] == 'darkmode':
            self.changeSheme('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)', 'color: rgb(136, 136, 136)')
            self.ui.toolButton_11.setToolTip(u"Darkmode")
            self.color = 1


    def deleted(self):
        index = self.ui.comboBox.currentIndex()
        data = self.uploadGlobalSettings()

        del(data['anime']['urls'][index])
        del(data['anime']['series'][index])

        try:
            del(data['anime']['images'][index])
            system(f'rm {self.current_path}/description/{data["anime"]["images"][index]}')
        except:
            pass
        try:
            del(data['anime']['description'][index])
        except:
            print('error name link!!!')
        try:
            del(data['anime']['name'][index])
        except:
            print('error name link!!!')

        self.setGlobalSettings(data, '', '', '', False, True)
        self.ui.comboBox.clear()
        self.ui.comboBox_3.clear()
        self.showed()
        self.viewDescription()


    def stoped(self):
        self.extraClose()
        self.stopCheck()


    def hidded(self):
        self.hide()
        self.click += 1


####<<< Manga-module >>>####
    def delItem(self):
        index = self.ui.comboBox_2.currentIndex()
        data = self.uploadGlobalSettings()
        del(data['manga']['numbers'][index])
        del(data['manga']['urls'][index])
        try:
            del(data['manga']['names'][index])
        except:
            pass
        try:
            del(data['manga']['change_numbers'][index])
        except:
            pass

        with open(f'{self.current_path}/setting.json', 'w') as w:
            w.write(f"{dumps(data, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")
        self.ui.comboBox.clear()
        self.showCombo()


    def checkUpdateItem(self):
        data = self.uploadGlobalSettings()
        value = self.ui.doubleSpinBox.value()
        index = self.ui.comboBox_2.currentIndex()
        if value != 0.0:
            if '.00' in str(value) or '.0' in str(value):
                value = int(value)
            data['manga']['numbers'][index] = value
            with open(f'{self.current_path}/setting.json', 'w') as w:
                w.write(f"{dumps(data, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")
            self.ui.doubleSpinBox.setValue(0)
            self.updateNumber()


    def loged(self):
        data = self.uploadGlobalSettings()
        text = '\n'.join(data['manga']['logs'])
        alert = QMessageBox()
        alert.setText(text)
        alert.exec_()


    def savedUrl(self):
        url = self.ui.lineEdit_2.text()
        number = self.ui.doubleSpinBox.value()
        data = self.uploadGlobalSettings()

        if check_url(url):
            self.setGlobalSettings(data, 'manga', 'urls', url, True)
            self.setGlobalSettings(data, 'manga', 'numbers', number, True)
            self.ui.lineEdit_2.setText('')
        else:
            self.ui.lineEdit_2.setStyleSheet('background: rgb(255, 0, 0)')
            self.ui.lineEdit_2.setText('Write correct url')
            Thread(target = self.editLineEdit).start()


    def currentUpdate(self):
        # self.times.start(3_600_000)
        self.flag = False
        Thread(target = self.upUrls).start()
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask-0.png'))
        self.ui.toolButton_20.setEnabled(False)
        self.ui.toolButton_17.setEnabled(False)
        Thread(target = self.checkWorkSelenium).start()


    def upUrls(self):
        global dead
        data = self.uploadGlobalSettings()
        logs = []
        numbers_check = []
        msg = []

        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        try:
            for i in enumerate(data['manga']['urls']):
                if dead == False:
                    break
                index_i = i[0] + 1
                self.percent_all_manga = int(index_i / len(data['manga']['urls']) * 100)
                driver.get(i[1])
                sleep(2)
                if 'https://manga-chan.me' in i[1]:
                    print(i)
                    manga = driver.find_elements_by_class_name('manga2')
                    print(len(manga))
                    manga = manga[0].text
                    manga = manga.split(' Глава ')
                    manga = manga[1].split(' ')
                    manga = manga[0]
                    if '.' in manga:
                        manga = float(manga)
                    else:
                        manga = int(manga)
                else:
                    print(i)
                    manga = driver.find_element_by_class_name('mt-3').text
                    manga = manga.split(' ')
                    if manga[-1].isdigit():
                        manga = int(manga[-1])
                    elif manga[-2].isdigit():
                        manga = int(manga[-2])
                    else:
                        try:
                            manga = float(manga[-1])
                        except:
                            manga = float(manga[-2])

                numbers_check.append(manga)

                if data['manga']['numbers'][i[0]] < manga:
                    logs.append(f'{data["manga"]["names"][i[0]]} > {manga}')
                    msg.append(f'{data["manga"]["names"][i[0]]} > {manga}')
                else:
                    logs.append(f'{data["manga"]["names"][i[0]]} = {manga}')
            dead = True
            if len(msg) > 0:
                text = '\n'.join(msg)
                system(f'notify-send "Вышло кое-что новенькое...\n{text}"')
            self.setGlobalSettings(data, 'manga', 'logs', logs)
            self.setGlobalSettings(data, 'manga', 'change_numbers', numbers_check)
        except Exception as e:
            print('Error ==>\n', e)


    def updateClickManga(self):
        self.flag = False
        Thread(target = self.setUpSelenium).start()
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask-0.png'))
        self.ui.toolButton_20.setEnabled(False)
        self.ui.toolButton_17.setEnabled(False)
        Thread(target = self.checkWorkSelenium).start()


    def checkWorkSelenium(self):
        sleep(2)
        while True:
            proc = popen('ps ax').read()
            if proc.find("chromedriver") == -1:
                self.flag = True
                self.ui.toolButton_23.setEnabled(True)
                self.ui.toolButton_20.setEnabled(True)
                self.ui.toolButton_17.setEnabled(True)
                self.ui.toolButton_22.setEnabled(True)
                self.ui.toolButton_4.setEnabled(True)
                self.ui.toolButton_5.setEnabled(True)
                self.ui.toolButton_9.setEnabled(True)
                self.ui.toolButton_12.setEnabled(True)
                self.tray.setToolTip('Check..')
                break
            else:
                self.ui.toolButton_23.setEnabled(False)
                self.ui.toolButton_22.setEnabled(False)
                self.ui.toolButton_4.setEnabled(False)
                self.ui.toolButton_5.setEnabled(False)
                self.ui.toolButton_9.setEnabled(False)
                self.ui.toolButton_12.setEnabled(False)



    def setUpSelenium(self):
        global dead
        data = self.uploadGlobalSettings()
        names = []
        s = 0
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        try:
            for i in data['manga']['urls']:
                if dead == False:
                    break
                index_i = s + 1
                self.percent_all_manga = int(index_i / len(data['manga']['urls']) * 100)
                driver.get(i)
                sleep(2)
                if 'https://manga-chan.me' in i:
                    name = driver.find_element_by_class_name('title_top_a').text
                    name = name.split('(')
                    name = name[-1][:-1:]
                else:
                    name = driver.find_element_by_class_name('name').text
                print(name)
                names.append(name)
            self.setGlobalSettings(data, 'manga', 'names', names)
            self.ui.comboBox_2.clear()
            self.showCombo()
            driver.quit()
        except Exception as e:
                print()
        dead = True


    def editLineEdit(self):
        sleep(4)
        self.ui.lineEdit_2.setText('')
        self.ui.lineEdit_2.setStyleSheet('background: rgb(255, 255, 255)')


    def showCombo(self):
        data = self.uploadGlobalSettings()
        for i in data['manga']['names']:
            self.ui.comboBox_4.addItem(i)

        for i in data['manga']['names']:
            self.ui.comboBox_2.addItem(i)


    def updateNumber(self):
        index = self.ui.comboBox_2.currentIndex()
        data = self.uploadGlobalSettings()
        self.ui.lcdNumber_2.display(data['manga']['numbers'][index])
        self.ui.lcdNumber_3.display(data['manga']['change_numbers'][index])
        if data['manga']['change_numbers'][index] == data['manga']['numbers'][index]:
            self.ui.lcdNumber_3.setStyleSheet('background: rgb(50, 233, 37)')
            self.ui.toolButton_21.setEnabled(False)
        else:
            self.ui.toolButton_21.setEnabled(True)
            self.ui.lcdNumber_3.setStyleSheet('background: rgb(192, 16, 16)')


    def openURLManga(self):
        index = self.ui.comboBox_2.currentIndex()
        data = self.uploadGlobalSettings()
        open_url(data['manga']['urls'][index])


#### <<< Tab Anime Description >>> ####
    def viewDescription(self):
        index = self.ui.comboBox_3.currentIndex()
        data = self.uploadGlobalSettings()

        self.ui.label_5.setPixmap(QPixmap(f'{self.current_path}/description/{data["anime"]["images"][index]}'))
        self.ui.textEdit.setHtml(data['anime']['description'][index])


    def setDescription(self):
        global dead
        dead = True
        images = []
        descs = []
        data = self.uploadGlobalSettings()
        try:
            for i in enumerate(data['anime']['urls']):
                if dead == False:
                    break
                img, desc = getDescription(i[1])
                images.append(img)
                descs.append(desc)
                index_i = i[0] + 1
                self.percent_desc_anime = int(index_i / len(data['anime']['urls']) * 100)
                print(self.percent_desc_anime, index_i, len(data['anime']['urls']))

        # data['anime']['description'] = descs
        # data['anime']['images'] = images
            self.setGlobalSettings(data, 'anime', 'description', descs)
            self.setGlobalSettings(data, 'anime', 'images', images)
        except Exception as e:
            print('Error ==>\n', e)
        sleep(4)
        self.percent_desc_anime = 0
        dead = True
        

    def uploadDescription(self):
        Thread(target = self.setDescription).start()


#### <<< Tab Manga Description >>> ####
    def uploadDescriptionManga(self):
        Thread(target = self.upDeskManga).start()
        Thread(target = self.checkWorkSelenium).start()


    def viewDescriptionManga(self):
        index = self.ui.comboBox_4.currentIndex()
        data = self.uploadGlobalSettings()

        self.ui.label_6.setPixmap(QPixmap(f'{self.current_path}/description/{data["manga"]["images"][index]}'))
        self.ui.textEdit_2.setHtml(data['manga']['description'][index])


    def upDeskManga(self):
        data = self.uploadGlobalSettings()
        imgs = []
        descs = []
        s = 0
        option = webdriver.ChromeOptions()
        option.add_argument('--headless')
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'), options=option)
        try:
            for i in enumerate(data['manga']['urls']):
                index_i = i[0] + 1
                driver.get(i[1])
                sleep(2)
                if 'https://manga-chan.me' in i[1]:
                    img = driver.find_element_by_id('cover')
                    img = img.get_attribute('src')
                    desc = driver.find_element_by_id('description').text
                else:
                    img = driver.find_elements_by_class_name('fotorama__img')
                    img = img[0].get_attribute('src')
                    desc = driver.find_element_by_class_name('manga-description').text
                print(img)
                image = img.split('/')
                descs.append(desc)
                r = get(img, stream=True)
                if r.status_code == 200:
                    with open(f'{self.current_path}/description/{image[-1]}', 'wb') as f:
                        r.raw.decode_content = True
                        copyfileobj(r.raw, f)
                image = loadImage(image[-1])
                imgs.append(image)
                self.percent_desc_manga = int(index_i / len(data['manga']['urls']) * 100)
            self.setGlobalSettings(data, 'manga', 'images', imgs)
            self.setGlobalSettings(data, 'manga', 'description', descs)
        except Exception as e:
            print('Error ==>\n', e)
        sleep(4)
        self.percent_desc_manga = 0
        driver.quit()


app = QtWidgets.QApplication([])
application = myWindow()
# application.show()
setdefaulttimeout(180)

exit(app.exec())
