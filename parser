#!/usr/bin/env python3


from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox, QSystemTrayIcon
from PyQt5.QtGui import QIcon, QPixmap, QMovie
from PyQt5.QtCore import QTimer, QThread, pyqtSignal
from QLed import QLed
from design import Ui_MainWindow
from sys import exit
from requests import get
from selenium import webdriver
from selenium.webdriver.common.by import By
from shutil import copyfileobj
from urllib import request as url_request
from webbrowser import open as open_url
from os import path, system
from time import sleep, localtime, strftime
from threading import Thread
from json import dumps, load
from pyttsx3 import init
from validators import url as check_url
from datetime import date
from random import randint
from alive_progress import alive_bar
from functools import partial
from notifications import (checkURL, getDescription, loadImage, 
                           checkFixedOutput, parseRanobe)


dead = enable = checker_tag = True
update_list_anime = down = while_var = False
checklist = ()
tab_start = None


class ThreadProgress(QThread):
    _signal = pyqtSignal(int)
    def __init__(self, data, flag=True):
        super(ThreadProgress, self).__init__()
        self.flag = flag
        self.data = data
        self.current_path = path.dirname(path.realpath(__file__))
        self.check = 0


    def __del__(self):
        self.wait()


    def run(self):
        self.check = 0
        global dead, checker_tag, update_list_anime, enable
        checker_tag = enable = False
        title = 'Checking ->' if self.flag else 'Updating ->'
        with alive_bar(len(self.data['anime']['urls']), title=title) as bar:
            for i in enumerate(self.data['anime']['urls']):
                try:
                    if dead == False:
                        break 
                    series = self.data['anime']['series'][i[0]] + 1
                    ova = self.data['anime']['ova'][i[0]] + 1
                    name, check_output = checkURL(self.data, i[1], series, ova)
                    self.check += 1 if check_output else 0
                    if name == '':
                        raise Exception('ERROR FOR URL_CHECK..')
                    if self.flag == False:
                        if 'icons/' in self.data['anime']['images'][i[0]]:
                            img, desc = getDescription(i[1])
                            self.data['anime']['images'][i[0]] = f'description/{img}'
                            self.data['anime']['description'][i[0]] = desc
                        self.data['anime']['name'][i[0]] = name
                    index = i[0] + 1
                    percent = int(index / len(self.data['anime']['urls']) * 100)
                    self._signal.emit(percent)
                    update_list_anime = True
                    bar()
                except Exception as e:
                    system(f'notify-send "Error checking anime\n{e}"')

        if self.check > 0:
            self.data['notify']['notify'] = 'unchecked'
            system('notify-send "Вышло кое-что новенькое!!!"')
            tts = init()
            tts.say("Something new came out... check the natification log...")
            tts.runAndWait()

        if isinstance(self.data, dict):
            with open(f'{self.current_path}/setting.json', 'w') as js:
                js.write(dumps(self.data, sort_keys=False, indent=4,
                               ensure_ascii=False, separators=(',', ': ')))
        
        sleep(1)
        percent = 0
        self._signal.emit(percent)
        del(self.check)
        checker_tag = True


class myWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(myWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setGeometry(480, 55, 400, 300)

        self.flag = True
        self.click = self.percent = self.percent_all_anime = self.color = 0
        self.percent_all_manga = self.percent_desc_manga = self.ranobe_percent = 0
        self.current_path = path.dirname(path.realpath(__file__))
        self.ui.tabWidget.setCurrentIndex(0)
        self.path_down = f'{self.current_path}/downloads'
        self.prefs = {'download.default_directory': self.path_down,
                      'download.prompt_for_download': False}
        self.option = webdriver.ChromeOptions()
        self.option.add_argument('--headless')
        self.option.add_experimental_option("prefs", self.prefs)
        self.sheme = (
            ('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)'),
            ('lamp', 'background: #FFFFFF', 'background: #FFFFFF')
        )
        bar = (self.ui.progressBar, self.ui.progressBar_2,
               self.ui.progressBar_3, self.ui.progressBar_7)
        labels_movie = (self.ui.label_2, self.ui.label_3, self.ui.label_4,
            self.ui.label_8, self.ui.label_9, self.ui.label_10, self.ui.label_11)
        gen = (self.ui.toolButton_2, self.ui.toolButton_19, self.ui.toolButton_29,
               self.ui.toolButton_8, self.ui.toolButton_13, self.ui.toolButton_27,
               self.ui.toolButton_21, self.ui.toolButton_30, self.ui.toolButton,
               self.ui.toolButton_15, self.ui.toolButton_32)
        up = (self.ui.toolButton_9, self.ui.toolButton_12, self.ui.toolButton_20,
              self.ui.toolButton_17, self.ui.toolButton_26, self.ui.toolButton_31)
        self.comboboxes = (self.ui.comboBox, self.ui.comboBox_2,
                           self.ui.comboBox_6, self.ui.comboBox_7)
        self.dict_funcs = {
                0: self.wrapperData,
                1: self.wrapperEnable,
                2: self.wrapperCheckbox,
                4: self.wrapperUpdateList,
                8: lambda e: self.ui.progressBar.setValue(e),
                9: lambda e: self.ui.progressBar_3.setValue(e),
                10: lambda e: self.ui.progressBar_7.setValue(e)
        }

        self.timer = QTimer()
        self.timer.timeout.connect(self.everySecond)
        self.timer.start(1000)

        self.movie = QMovie(f"{self.current_path}/icons/free.gif")
        [i[1].setMovie(self.movie) for i in enumerate(labels_movie)]
        
        self.tray = QSystemTrayIcon(self)
        self.tray.activated.connect(self.triggerFocus)
        self.tray.show()

        self.led = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.led.setGeometry(370, 135, 12, 12)

        self.defaultIcon()
        self.checkModeSheme()

        [self.showed(i[1], i[0]) for i in enumerate(self.comboboxes)]
        for i in (self.ui.toolButton_24,self.ui.toolButton_10,self.ui.toolButton_11):
            i.setStyleSheet('border: none;')
        for i in enumerate(('#00e916', '#8BC6EC;', '#FFE53B;', '#FF3CAC;')):
            bar[i[0]].setStyleSheet(f'selection-background-color: {i[1]}')

        for i in enumerate((*self.comboboxes[:-1:],self.ui.comboBox_3,self.ui.comboBox_4)):
            self.changed(i[0])
            i[1].activated[str].connect(partial(self.changed, i[0]))
        
        self.timer_check = QTimer()
        self.timer_check.timeout.connect(partial(self.checkItems, True))
        self.checkItems(True)

        self.ui.toolButton_3.clicked.connect(self.closed)
        self.ui.toolButton_5.clicked.connect(self.oneDown)
        self.ui.toolButton_6.clicked.connect(self.stoped)
        self.ui.toolButton_10.clicked.connect(self.notifyCheck)
        self.ui.toolButton_11.clicked.connect(self.modeColorSheme)
        self.ui.toolButton_14.clicked.connect(self.openPlayer)
        self.ui.toolButton_18.clicked.connect(self.openURL)
        self.ui.toolButton_24.clicked.connect(self.aboutInfo)
        for i in enumerate(gen):
            i[1].clicked.connect(self.deleted) if i[0] in (0,1,2) else \
            i[1].clicked.connect(self.loged) if  i[0] in (3,4,5) else \
            i[1].clicked.connect(self.edited) if  i[0] in (6,7) else \
            i[1].clicked.connect(self.saved)
        for i, j in enumerate(up):
            flag = True if i % 2 == 1 else False
            j.clicked.connect(partial(self.checkItems, flag)) if i in (0,1) else \
            j.clicked.connect(partial(self.checkMangaUrl, flag)) if i in (2,3) else \
            j.clicked.connect(partial(self.checkRanobeUrl, flag))
        

#### <<< Main-module >>> ####
    def keyPressEvent(self, QKeyEvent):
        int_key = QKeyEvent.key()
        if int_key == 16777216:
            self.hidded()


    def uploadGlobalSettings(self):
        try:
            with open(f'{self.current_path}/setting.json', 'r') as reads:
                data = load(reads)
        except Exception as e:
            system(f'notify-send "Error upload settitng.json\n{e}"')
            with open(f'{self.current_path}/default.json', 'r') as reads:
                data = load(reads)
        return data


    def setGlobalSettings(self, to_json, tab, mode, var, flag=False, state=False):
        if state:
            pass
        else:
            if flag:
                if tab == "":
                    to_json[mode].append(var)
                else:
                    to_json[tab][mode].append(var)
            else:
                if tab == '':
                    to_json[mode] = var
                else:
                    to_json[tab][mode] = var
        if isinstance(to_json, dict):
            with open(f'{self.current_path}/setting.json', 'w') as js:
                js.write(dumps(to_json, sort_keys=False, indent=4,
                            ensure_ascii=False, separators=(',', ': ')))
            with open(f'{self.current_path}/default.json', 'w') as js:
                js.write(dumps(to_json, sort_keys=False, indent=4,
                            ensure_ascii=False, separators=(',', ': ')))
        else:
            system(f'notify-send "Error, no update file <setting.json>"')


    def stoped(self):
        global while_var
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Information)
        alert.setGeometry(541, 107, 200, 200)
        if while_var:
            alert.setText('Do you really want to finished process?')
            alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            rezult = alert.exec()
            if rezult == QMessageBox.Ok:
                self.extraClose()
        else:
            alert.setText('No active processes for ending!')
            alert.exec_()


    def hidded(self):
        self.hide()
        self.click += 1


    def extraClose(self):
        global dead
        dead = False
        system('killall -s 9 chromedriver')
        self.defaultIcon()


    def closed(self):
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Information)
        alert.setText('Do you really want to leave?')
        alert.setGeometry(541, 107, 200, 200)
        alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        rezult = alert.exec()

        if rezult == QMessageBox.Ok:
            self.extraClose()
            self.close()


    def aboutInfo(self):
        alert = QMessageBox()
        alert.setText(self.uploadGlobalSettings()['about'])
        alert.exec_()


#<<<<!>>>> Function worker every second
    def variableTime(self):
        global checker_tag, update_list_anime, enable, tab_start, down, while_var 
        data = self.uploadGlobalSettings()['notify']['notify']
        index = self.ui.tabWidget.currentIndex()
        checkbox = False
        
        self.flag = False if while_var else True
        
        if self.ui.checkBox_2.isChecked():
            checkbox = True
        
        return (data, enable, checkbox, checker_tag,
                update_list_anime, index, tab_start, self.percent_all_anime,
                self.percent, self.percent_all_manga, self.ranobe_percent,
                while_var, down)


    def everySecond(self):
        self.timeNumber(*self.variableTime())


    def timeNumber(self, data, enable, checkbox, checker_tag,
                   update_list, index, tabs, anime_percent, percent,
                    percent_manga, ranobe_percent, var, down):
        global checklist
        
        inputs = (data, enable, checkbox, checker_tag,
                  update_list, index, tabs, anime_percent,
                  percent, percent_manga, ranobe_percent, var, down)
        if checklist != inputs:
            for i in range(len(inputs)):
                if len(checklist) == 0 or checklist[i] != inputs[i]:
                    self.iconTab(index, tabs, var, down) if i in (5,6,11,12) else \
                    self.wrapperCheckerTag(inputs[3], inputs[7]) if i in (3,7) else \
                    self.dict_funcs[i](inputs[i])
            checklist =inputs


    ### TODO: edit toolTip
    def iconTab(self, index, tab, while_var=False, down=False):
        self.ui.toolButton_24.setToolTip('About')
        pre = 'AnimeVost tracker' if index == 0 else 'Manga tracker' if index == 1 \
              else 'Ranobe tracker' if index == 2 else 'View description'
        if self.flag:
            ico = 'animevost.png' if index == 0 else 'mask.png' if index == 1 \
                else 'ranobe.png' if index == 2 else 'a-desc.png'
        else:
            ico = 'dow.png' if while_var and down and tab == 0 else \
                  'animevost-new.webp' if tab == 0 else 'mask-0.png' \
                                       if tab == 1 else 'ranobe-0.png'
        tool = 'Download file..' if down else pre
        self.tray.setToolTip(tool)
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/{ico}'))
#<<<<!>>>>
            

    def wrapperData(self, data):
        ico = 'notify' if data in 'unchecked' else 'notification' \
                       if data in 'checked' else 'bell'
        self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/{ico}.png'))


    def wrapperEnable(self, enable):
        self.movie.stop() if enable else self.movie.start()
        self.led.value = False if enable else True
        self.led.setToolTip('Not Working..' if enable else 'Working..')


    def wrapperCheckbox(self, checkbox):
        ico = 'all-click' if checkbox else 'click'
        tool = 'Download All Elements' if checkbox else 'Download Current Element'
        self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/{ico}.png'))
        self.ui.toolButton_5.setToolTip(tool)
    

    def wrapperCheckerTag(self, check, anime_percent):
        self.percent_all_anime = anime_percent if check else 0
        self.ui.progressBar_2.setValue(anime_percent) if check else False
    

    def wrapperUpdateList(self, update_list):
        global update_list_anime
        self.showed(self.ui.comboBox, 0) if update_list else False
        update_list_anime = False if update_list else True


    def editLineEdit(self, edit):
        sleep(2.5)
        edit.setText('')
        data = self.uploadGlobalSettings()['mode']
        rgb = 'background: rgb(136, 136, 136)' if data['mode'] == 'darkmode' else \
              'background: rgb(220, 220, 220)'
        edit.setStyleSheet(rgb)


    def notifyCheck(self):
        alert = QMessageBox()
        data = self.uploadGlobalSettings()

        if self.emptyNotify(data):
            data['notify']['notify'] = 'empty'
            alert.setGeometry(600, 95, 300, 100)
            alert.setText("No notifications..")
        else:
            str_ = []
            if len(data['notify']['anime']) > 0:
                str_.append(''.join(data['notify']['anime']))
            if len(data['notify']['manga']) > 0:
                str_.append(''.join(data['notify']['manga']))
            if len(data['notify']['ranobe']) > 0:
                str_.append(''.join(data['notify']['ranobe']))
            str = "\n".join(str_)
            alert.setGeometry(420, 95, 300, 100)
            alert.setText(str)
            data['notify']['notify'] = 'checked'
        self.setGlobalSettings(data, '', '', '', False, True)
        alert.exec_()


    def modeColorSheme(self):
        mode = 'darkmode' if self.color % 2 == 0 else 'lightmode'
        self.changeSheme(*self.sheme[0 if self.color % 2 == 0 else 1])
        self.setGlobalSettings(self.uploadGlobalSettings(), '', 'mode', mode)
        self.color += 1


    def checkModeSheme(self):
        reads = self.uploadGlobalSettings()
        self.color = 0 if reads['mode'] == 'lightmode' else 1
        self.changeSheme(*self.sheme[0 if self.color % 2 == 1 else 1])

        data = reads['notify']['notify']
        ico = 'notify' if data in 'unchecked' else 'notification' \
                       if data in 'checked' else 'bell'
        self.ui.toolButton_10.setIcon(
                QIcon(f'{self.current_path}/icons/{ico}.png'))


### << Mode color sheme < Black | White > >> ###
    def changeSheme(self, ico, win, back):
        self.setStyleSheet(win)
        list_back = (
            self.ui.lineEdit, self.ui.lineEdit_2, self.ui.lineEdit_3,
            self.ui.textEdit, self.ui.comboBox, self.ui.comboBox_2,
            self.ui.comboBox_3, self.ui.comboBox_4, self.ui.comboBox_6,
            self.ui.comboBox_7, self.ui.spinBox, self.ui.doubleSpinBox,
            self.ui.doubleSpinBox_2, self.ui.lcdNumber, self.ui.lcdNumber_2,
            self.ui.lcdNumber_3, self.ui.lcdNumber_4, self.ui.lcdNumber_5,
            self.ui.lcdNumber_6, self.ui.toolButton_11, self.ui.toolButton_24
        )
        ls = (
            QIcon(f'{self.current_path}/icons/{ico}.png'), 
            QIcon(f'{self.current_path}/icons/{ico}-about.png')
        )
        list_check = (self.ui.checkBox, self.ui.checkBox_2)
        for i in enumerate(list_back):
            i[1].setIcon(ls[0]) if i[0] == 19 else \
            i[1].setIcon(ls[1]) if i[0] == 20 else \
            i[1].setStyleSheet(back)

        tool = ('Lightmode', '#0b76ef') if ico in 'lamp' else \
               ('Darkmode', '#8B33B5')
        list_back[-2].setToolTip(tool[0])
        for i in list_check:
            i.setStyleSheet(f'border-color: {tool[1]}; background-color: {tool[1]};')


# Set Icon for toolButton
    def defaultIcon(self):
        list_tab = ('animevost.png', 'mask.png', 'ranobe.png', 'a-desc.png')
        for i in enumerate(list_tab):
            str = f'{self.current_path}/icons/{i[1]}'
            self.ui.tabWidget.setTabIcon(i[0], QIcon(str))
            if i[0] < 3:
                self.ui.comboBox_4.setItemIcon(i[0], QIcon(str))
        list_tool = (
            self.ui.toolButton_2, self.ui.toolButton_19, self.ui.toolButton_29,
            self.ui.toolButton_9, self.ui.toolButton_26, self.ui.toolButton_20,
            self.ui.toolButton_8, self.ui.toolButton_27, self.ui.toolButton_13,
            self.ui.toolButton, self.ui.toolButton_15, self.ui.toolButton_32,
            self.ui.toolButton_17, self.ui.toolButton_12, self.ui.toolButton_31,
            self.ui.toolButton_21, self.ui.toolButton_30, self.ui.toolButton_7,
            self.ui.toolButton_4, self.ui.toolButton_18, self.ui.toolButton_3,
            self.ui.toolButton_6, self.ui.toolButton_14
        )
        lists = ('trash', 'circle', 'log-one', 'diskette', 'checking', 'edit',
                 'checkbox-1', 'checkbox-2', 'web', 'close', 'lose', 'player')
        list_icon = [QIcon(f'{self.current_path}/icons/{i}.png') for i in lists]
        for i in enumerate(list_tool):
            i[1].setIcon(list_icon[0]) if i[0] in (0,1,2) else \
            i[1].setIcon(list_icon[1]) if i[0] in (3,4,5) else \
            i[1].setIcon(list_icon[2]) if i[0] in (6,7,8) else \
            i[1].setIcon(list_icon[3]) if i[0] in (9,10,11) else \
            i[1].setIcon(list_icon[4]) if i[0] in (12,13,14) else \
            i[1].setIcon(list_icon[5]) if i[0] in (15,16) else \
            i[1].setIcon(list_icon[6]) if i[0] == 17 else \
            i[1].setIcon(list_icon[7]) if i[0] == 18 else \
            i[1].setIcon(list_icon[8]) if i[0] == 19 else \
            i[1].setIcon(list_icon[9]) if i[0] == 20 else \
            i[1].setIcon(list_icon[10]) if i[0] == 21 else \
            i[1].setIcon(list_icon[11])
            i[1].setToolTip('Exit') if i[0] == 20 else False


    def triggerFocus(self, reason):
        if (reason == QSystemTrayIcon.Trigger or
            reason == QSystemTrayIcon.MiddleClick):
            self.show() if self.click % 2 == 0 else self.hide()
            self.click += 1


    def openPlayer(self):
        index = self.ui.lcdNumber.intValue() if self.ui.spinBox.value() == 0 else \
                self.ui.spinBox.value()
        name = "_".join(self.ui.comboBox.currentText().split())
        if index > 0 and index <= self.ui.lcdNumber.intValue():
            link = f"{self.path_down}/{name}/{name}-{index} серия.mp4"
            Thread(target = system, args = (f'mpv "{link}"',)).start()
        else:
            alert = QMessageBox()
            alert.setText('No file..')
            alert.exec()


    def openURL(self):
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        child = 'track-link' if tab == 0 and self.ui.checkBox.isChecked() else \
                'urls'
        index = self.comboboxes[-1].currentIndex() if tab == 0 and \
                self.ui.checkBox.isChecked() else self.comboboxes[tab].currentIndex()
        mode = 'anime' if tab == 0 else 'manga' if tab == 1 else 'ranobe'
        if len(data[mode][child]) > 0:
            open_url(data[mode][child][index])
        else:
            system(f'notify-send "List <{mode}> is empty"')


    def deleted(self):
        global enable
        if enable:
            enable = False
            data = self.uploadGlobalSettings()
            tab = self.ui.tabWidget.currentIndex()
    
            alert = QMessageBox()
            alert.setIcon(QMessageBox.Information)
            alert.setText('Are you sure you want to delete this entry?')
            alert.setGeometry(514, 107, 200, 200)
            alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

            catch = 'log' if tab in (0,2) else 'logs'
            throw = 'names' if tab in (1,2) else 'name'
            mode = 'anime' if tab == 0 else 'manga' if tab == 1 else 'ranobe'
            ico = 'animevost' if tab == 0 else 'mask' if tab == 1 else 'ranobe'
            index = self.comboboxes[tab].currentIndex()
            icon = f'icons/{ico}.png'

            rezult = alert.exec()
            if rezult == QMessageBox.Ok:
                remove = f'rm {self.current_path}/{data[mode]["images"][index]}'
                system(remove) if  data[mode]["images"][index] != icon else True
                self.checkNotify(data, mode, data[mode][throw][index])
                for i in data[mode]:
                    if i == catch:
                        continue
                    del(data[mode][i][index])
                self.setGlobalSettings(data, '', '', '', False, True)
    
                if self.ui.comboBox_4.currentIndex() == tab:
                    self.ui.comboBox_3.clear()
                    self.ui.comboBox_4.setCurrentIndex(tab)
                self.showed(self.comboboxes[tab], tab)
            enable = True


    def loged(self):
        alert = QMessageBox()
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        log = 'logs' if tab == 1 else 'log'
        mode = 'anime' if tab == 0 else 'manga' if tab == 1 else 'ranobe'
        if len(data[mode][log]) > 0:
            text = '\n'.join(data[mode][log]) if log == 'logs' else data[mode][log]
            alert.setText(text)
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def edited(self):
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        child = ('manga','numbers') if tab == 1 else ('ranobe','chapters')
        index = self.ui.comboBox_2.currentIndex() if tab == 1 else \
                self.ui.comboBox_6.currentIndex()
        text = self.ui.comboBox_2.currentText() if tab == 1 else \
                self.ui.comboBox_6.currentText()
        value = self.ui.doubleSpinBox.value() if tab == 1 else \
                self.ui.doubleSpinBox_2.value()
        if value != 0.0:
            decimal = int(str(value).split('.')[1])
            value = int(value) if decimal == 0 else float(value)
            data[child[0]][child[1]][index] = value
            self.checkNotify(data, child[0], text, value)
            data['notify']['notify'] = 'empty' if self.emptyNotify(data) else \
                                       data['notify']['notify']
            self.setGlobalSettings(data, '', '', '', False, True)
            if child == 'manga':
                self.ui.doubleSpinBox.setValue(0)
                self.updateNumber()
            else:
                self.ui.doubleSpinBox_2.setValue(0)
                self.upComboRanobe()


    def checkNotify(self, data, child, text, value = None, check = True):
        char = 'chapter' if check else 'series'
        tmp = f'{text} - new ' if value is None else \
              f'{text} - new {char} {value}'
        temp = f'{text} - new ova' if child in 'anime' else 'NOT CHECK'
        while True:
            for i in range(len(data['notify'][child])):
                if tmp in data['notify'][child][i] or temp in data['notify'][child][i]:
                    del(data['notify'][child][i])
                    break
            else:
                break


    def emptyNotify(self, data):
        if (len(data['notify']['anime']) == 0 and
            len(data['notify']['manga']) == 0 and
            len(data['notify']['ranobe']) == 0):
            self.ui.toolButton_10.setIcon(QIcon(
                    f'{self.current_path}/icons/empty.png'))
            return True
        else:
            return False


    def saved(self):
        global enable
        if enable:
            enable = False
            tab = self.ui.tabWidget.currentIndex()
            data = self.uploadGlobalSettings()
            name = 'names' if tab in (1,2) else 'name'
            mode = 'anime' if tab == 0 else 'manga' if tab == 1 else 'ranobe'
            mask = 'animevost' if tab == 0 else 'mask' if tab == 1 else 'ranobe'
            icon = QIcon(f'{self.current_path}/icons/{mask}.png')
            catch = ('log', 'track-name', 'track-link') if tab == 0 else \
                    'logs' if tab == 1 else 'log'
            series = self.ui.spinBox.value() if tab == 0 else \
                     self.ui.doubleSpinBox.value() if tab == 1 else \
                     self.ui.doubleSpinBox_2.value()
            edit = (self.ui.lineEdit, self.ui.lineEdit_2, self.ui.lineEdit_3)
            track = self.ui.comboBox_7.currentIndex()
            url = data['anime']['track-link'][track] if tab == 0 \
                  and self.comboboxes[-1].isChecked() else edit.text()
            title = self.ui.comboBox_7.currentText().split(' / ')[0] if tab == 0 \
                    and self.ui.checkBox.isChecked() else ''
            ico = f'icons/{mask}.png'
            dicts = {0: url, 1: series, 2: 0, 3: title, 5: '', 6: ico} if tab == 0 \
                    else {0: url, 1: series, 2: 0, 3: '', 6: '', 5: ico} if tab == 1 \
                    else {0: url, 2: series, 3: 0, 4: 0, 1: title, 5: '', 6: ico}
            if check_url(url):
                edit[tab].setStyleSheet('background: rgb(98, 255, 59)')
                for i in enumerate(data[mode]):
                    if i[1] in catch:
                        continue
                    data[mode][i[1]].append(dicts[i[0]])
                self.comboboxes[tab].addItem(title)
                self.comboboxes[tab].setItemIcon(len(data[mode][name])-1, icon)
                self.setGlobalSettings(data, '', '', '', False, True)
            else:
                system(f'notify-send "Error add {mode}"')
                edit[tab].setStyleSheet('background: rgb(236, 0, 0)')
                edit[tab].setText('  ERROR check URL..')
            Thread(target = self.editLineEdit, args = (edit[tab],)).start()
            enable = True


    def showed(self, combo, index):
        name = 'name' if index == 0 else 'names' if index in (1,2) else 'track-name'
        child = 'anime' if index in (0,3) else 'manga' if index == 1 else 'ranobe'
        ico = 'animevost' if index in (0,3) else 'mask' if index == 1 else 'ranobe'
        combo.clear()
        data = self.uploadGlobalSettings()[child][name]
        for i in enumerate(data):
            combo.addItem(i[1])
            combo.setItemIcon(i[0], QIcon(f'{self.current_path}/icons/{ico}.png'))


    def changed(self, tab):
        data = self.uploadGlobalSettings()
        mode = 'anime' if tab == 0 else 'manga' if tab == 1 else \
               'ranobe' if tab == 2 else self.ui.comboBox_4.currentText()
        name = 'name' if  mode in 'anime' else 'names'
        child = 'series' if tab == 0 else 'numbers' if tab == 1 \
                else 'chapters' if tab == 2 else name
        twin = 'change_numbers' if mode in 'manga' else 'access-chapters' \
                if mode in 'ranobe' else 'series'
        index = self.comboboxes[tab].currentIndex() if tab in (0,1,2) else \
                self.ui.comboBox_3.currentIndex() if tab == 3 else \
                self.ui.comboBox_4.currentIndex()
        lcd = (self.ui.lcdNumber, self.ui.lcdNumber_2, self.ui.lcdNumber_3,
               self.ui.lcdNumber_4, self.ui.lcdNumber_5, self.ui.lcdNumber_6)
        lcd_check = lcd[:1:] if tab == 0 else lcd[1:3:] if tab == 1 else \
                    lcd[3::] if tab == 2 else None if tab == 3 else False
        num = float(f"{data['anime']['series'][index]}.{data['anime']['ova'][index]}"
                    if tab == 0 else 0)
        current = data[mode][child][index] if tab in (1,2) else num
        if lcd_check is None:
            self.ui.label_5.setPixmap(QPixmap(
                f'{self.current_path}/{data[mode]["images"][index]}'))
            self.ui.textEdit.setHtml(data[mode]['description'][index])
        elif lcd_check == False:
            self.ui.comboBox_3.clear()
            ico = 'animevost' if index == 0 else 'mask' if index == 1 else 'ranobe'
            for i in enumerate(data[mode][name]):
                self.ui.comboBox_3.addItem(i[1])
                self.ui.comboBox_3.setItemIcon(i[0],
                    QIcon(f'{self.current_path}/icons/{ico}.png'))
            self.changed(3)
        else:
            for i,v in enumerate(lcd_check):
                v.display(current if i == 0 else data[mode][twin][index] \
                          if i == 1 else data[mode]['future-chapters'][index])
            back = ('rgb(50, 233, 37)', False) if data[mode][child][index] == \
                   data[mode][twin][index] else ('rgb(192, 16, 16)', True)
            [i.setStyleSheet(f'background: {back[0]}') for i in lcd_check \
                if i != lcd_check[0]]


####<<< Anime-module >>>####
    def oneParsing(self, data, url, digit, index_value = 0):
        global dead, while_var, enable
        dead = True
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'),
                                  options=self.option)
        urls = data['anime']['urls']
        try:
            self.percent_all_anime = 5
            driver.get(url)
            self.percent_all_anime = 15
            sleep(3)
            search_count_series = driver.find_elements(By.CLASS_NAME, 'epizode')
            name = driver.find_element(By.CLASS_NAME, 'shortstoryHead').text
            next = driver.find_element(By.CLASS_NAME, 'next')
            name_dir = name.split(' /')
            self.percent_all_anime = 35
            log = ''
            series = digit + 1 + data['anime']['ova'][urls.index(url)]

            def continueDownload(count = 0, repeat = False):
                nonlocal search_count_series, series, name, \
                          next, name_dir, data, log
                count = series
                while count > 0:
                    if series <= 6: break
                    next.click()
                    count -= 6

                self.percent_all_anime = 40
                step = -1 if count == 0 else series - 1
                if data['anime']['ova'][urls.index(url)] > 0:
                    step = -(data['anime']['ova'][urls.index(url)]+1)

                while True:
                    click_i = search_count_series[step].text
                    if click_i != '':
                        break

                search_count_series[step].click()
                sleep(15)

                iframe = driver.find_elements(By.TAG_NAME, 'iframe')
                for item in range(len(iframe)):
                    driver.switch_to.frame(iframe[item])
                    sleep(0.4)
                    down = driver.find_elements(By.CLASS_NAME, 'butt')
                    if len(down) != 4:
                        sleep(0.3)
                        driver.switch_to.default_content()
                        continue
                    else:
                        break

                self.percent_all_anime = 55
                sleep(3)
                let = down[-2].get_attribute("href").split('?')[0].split('/')
                self.percent_all_anime = 65
                sleep(3)

                self.Download(down[2].get_attribute('href'), let[-1], urls,
                              name_dir[0], url, name, series, data, click_i)
                
                self.percent_all_anime = 97
                log = f'{name_dir[0]} - New series {series}'
                driver.switch_to.default_content()
                if repeat:
                    series += 1
                    fl = True if len(search_count_series) - series > 0 else False
                    continueDownload(len(search_count_series) - series, fl)
        
            length = len(search_count_series)
            continueDownload(length - series, True) if length > series else \
            continueDownload()

        except Exception as e:
            system(f'notify-send "Error one-down\n<< {e} >>"')
            log = f"!!! << Error: {e} >> !!!"

        driver.quit()
        data['anime']['log'] = log
        self.setGlobalSettings(data, 'anime', 'log', log)
        self.percent_all_anime = 100
        self.ui.progressBar_2.setFormat('Completed')
        sleep(1.2)
        self.percent_all_anime = 0
        self.ui.progressBar_2.setFormat('%p%')
        if index_value == 0:
            while_var = False
            enable = dead = True
            self.ui.toolButton_5.show()


    def checkUpload(self, f, url, dirs, link, name, series, data, search='серия'):
        curent_time = strftime("%H:%M", localtime())
        names_dir = '_'.join(dirs.split())
        child = 'series' if 'серия' in search else 'ova'
        data['anime'][child][url.index(link)] += 1
        ova = data['anime']['ova'][url.index(link)] if 'ОВА' in search else False
        series = f"ova-{ova}" if 'ОВА' in search else f'{series} серия'
        system(f'notify-send "Вышла {series}! {name}\n{curent_time}"')

        False if path.isdir(f'{self.path_down}') else system(f'mkdir "{self.path_down}"') 

        if not path.isdir(f'{self.path_down}/{names_dir}'):
            system(f'mkdir "{self.path_down}/{names_dir}"')

        system(f'mv "{self.path_down}/_{f}" \
                    "{self.path_down}/{names_dir}/{names_dir}-{series}.mp4"')
        self.setGlobalSettings(data, 'anime', 'series', data['anime']['series'])


    def handleProgress(self, blocknum, blocksize, totalsize):
        global dead, down
        readed_data = blocknum * blocksize
        if totalsize > 0:
            down = True
            self.percent = int(readed_data * 100 / totalsize)
            if dead == False:
                raise Exception("Sorry, no numbers below zero")
            QtWidgets.QApplication.processEvents()


    def Download(self, downs, f, urls, dirs, link, name, series, data, search):
        global dead, down
        dead = True
        save_loc = f'{self.current_path}/downloads/_{f}'
        try:
            self.ui.progressBar.setToolTip(
                f'Download:\n{dirs} -> {data["anime"]["series"][urls.index(link)]+1}')
            self.ui.progressBar.setFormat('Complete %p%')
            url_request.urlretrieve(downs, save_loc, self.handleProgress)
            down = False
            self.ui.progressBar.setFormat('Completed')
            self.checkNotify(data, 'anime', dirs, series, False)
            data['notify']['notify'] = 'empty' if self.emptyNotify(data) else \
                                       data['notify']['notify']
            self.checkUpload(f, urls, dirs, link, name, series, data, search)
        except Exception as e:
            system(f'rm {self.current_path}/downloads/_{f}')
            system(f'notify-send "Error download anime: {dirs}\n{e}"')
            dead = True
            down = False
            print('Error: ==>\n', e)
            self.ui.progressBar.setToolTip(
                f'Error download\n{dirs} -> {data["anime"]["series"][urls.index(link)]+1}')


    def progressCount(self, percent):
        self.ui.progressBar_2.setValue(percent)


    def uploadTrackerAnime(self):
        global dead
        data = self.uploadGlobalSettings()
        try:
            names, links = checkFixedOutput()
            self.setGlobalSettings(data, 'anime', 'track-name', names)
            self.setGlobalSettings(data, 'anime', 'track-link', links)
        except Exception as e:
            system(f'notify-send "Error for update Checker Anime:\n{e}"')
        self.showed(self.ui.comboBox_7, 3)


    def checkItems(self, flag):
        global enable
        self.timer_check.start(900_000)
        if enable:
            enable = self.flag = False
            data = self.uploadGlobalSettings()
            self.ui.toolButton_12.hide() if flag else self.ui.toolButton_9.hide()
            Thread(target = self.clicker, args = (data, not flag)).start()


    def clicker(self, data, check=True):
        global enable, dead, tab_start, while_var
        while_var = dead = True
        tab_start = 0

        self.thread_class = ThreadProgress(data, not check)
        self.thread_class._signal.connect(self.progressCount)
        self.thread_class.start()
        self.thread_class.wait()

        while_var = dead = False
        self.uploadTrackerAnime()
        sleep(1)
        self.ui.toolButton_12.show() if not check else self.ui.toolButton_9.show()
        dead = enable = True


    def oneDown(self):
        global enable, dead, tab_start, while_var
        if enable:
            enable = False
            dead = while_var = True
            tab_start = 0
            data = self.uploadGlobalSettings()
            self.ui.toolButton_5.hide()
            indexs = []
            if len(data['notify']['anime']) > 0:
                for el in enumerate(data['notify']['anime']):
                    element = el[1].split(' > ')[1].split(' - new')[0]
                    indexs.append(data['anime']['name'].index(element))
            seti = list(set(indexs))
            
            def alerts():
                global enable, while_var
                alert = QMessageBox()
                alert.setIcon(QMessageBox.Information)
                alert.setText('No data for update..')
                alert.setGeometry(560, 75, 100, 100)
                alert.exec()
                enable = True
                while_var = False
                self.ui.toolButton_5.show()

            if len(seti) > 0:
                value = self.ui.lcdNumber.intValue()
                index = self.ui.comboBox.currentIndex()
                args = (data, seti) if self.ui.checkBox_2.isChecked() else \
                       (data, data['anime']['urls'][index], value)
                func = self.checkDelOrDown if self.ui.checkBox_2.isChecked() else \
                       self.oneParsing
                Thread(target = func, args = args).start()
            else:
                alerts()


    def checkDelOrDown(self, data, seti):
        global enable, dead
        if len(seti) > 0:
            for i in seti:
                if dead == False:
                    break
                url = data['anime']['urls'][i]
                series = data['anime']['series'][i]
                index = 0 if i == seti[-1] else randint(1,6)
                self.oneParsing(data, url, series, index)
            enable = dead = True


####<<< Manga-module >>>####
    def checkMangaUrl(self, flag):
        global enable, dead, while_var, tab_start
        if enable:
            enable = False
            tab_start = 1
            dead = while_var = True
            data = self.uploadGlobalSettings()
            self.ui.toolButton_17.hide() if flag else self.ui.toolButton_20.hide()
            Thread(target = self.upUrls, args = (data, not flag)).start()


    def upUrls(self, data, update_check = False):
        global dead, while_var, enable
        msg = []
        length = len(data['manga']['urls'])
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'),
                                  options=self.option)
        for i in enumerate(data['manga']['urls']):
            try:
                with alive_bar(5, title = f'{i[0]} -> ') as bar:
                    bar()
                    if dead == False:
                        driver.quit()
                        break
                    ii = i[0] + 1
                    self.percent_all_manga = int(ii / length * 100)
                    driver.get(i[1])
                    sleep(2)
                    bar()
                    if 'https://manga-chan.me' in i[1]:
                        manga = driver.find_elements(By.CLASS_NAME,
                            'manga2')[0].text.split(' Глава ')[1].split(' ')[0]
                        if '.' in manga:
                            manga = float(manga)
                        else:
                            manga = int(manga)
                        name = driver.find_element(By.CLASS_NAME,
                            'title_top_a').text.split('(')[-1][:-1:]
                        img = driver.find_element(By.ID, 'cover').get_attribute('src')
                        desc = driver.find_element(By.ID, 'description').text
                    else:
                        manga = driver.find_element(By.CLASS_NAME,
                                    'mt-3').text.split(' ')
                        if manga[-1].isdigit():
                            manga = int(manga[-1])
                        elif manga[-2].isdigit():
                            manga = int(manga[-2])
                        else:
                            try:
                                manga = float(manga[-1])
                            except:
                                manga = float(manga[-2])
                        name = driver.find_element(By.CLASS_NAME, 'name').text
                        img = driver.find_elements(By.CLASS_NAME,
                            'fotorama__img')[0].get_attribute('src')
                        desc = driver.find_element(By.CLASS_NAME,
                            'manga-description').text

                    bar()
                    data['manga']['change_numbers'][i[0]] = manga
    
                    if data['manga']['numbers'][i[0]] < manga:
                        c_d = date.today()
                        c_t = strftime("%H:%M", localtime())
                        data['manga']['logs'][i[0]] = f'{name} > {manga}'
                        head = f'[M][{c_d.day}/{c_d.month}/{c_d.year} - {c_t}] > '
                        body = f'{name} - new chapter {manga}\n'
                        note = f'{head} {body}'
                        msg.append(note)
                    else:
                        data['manga']['logs'][i[0]] = f'{name} = {manga}'
                    bar()
                    if update_check:
                        if 'description/' in data['manga']['images'][i[0]]:
                            pass
                        else:
                            image = img.split('/')[-1]
                            r = get(img, stream=True)
                            if r.status_code == 200:
                                with open(f'{self.current_path}/description/{image}',
                                    'wb') as f:
                                    r.raw.decode_content = True
                                    copyfileobj(r.raw, f)
                            loadImage(image)
                            data['manga']['images'][i[0]] = f'description/{image}'
                            data['manga']['description'][i[0]] = desc
                        data['manga']['names'][i[0]] = name
                    bar()
            except Exception as e:
                system(f'notify-send "Error check manga\n{e}"')
        if len(msg) > 0:
            data['notify']['manga'] += msg
            data['notify']['notify'] = 'unchecked'
            system('notify-send "Вышло кое-что новенькое.."')
        self.setGlobalSettings(data, '', '', '', False, True)
        while_var = False
        enable = dead = True
        self.ui.toolButton_17.show() if not update_check else self.ui.toolButton_20.show()
        sleep(2)
        self.percent_all_manga = 0


#### <<< Tab Ranobe >>> ####
    def setRanobe(self, check, data):
        global enable, dead, while_var
        dead = True
        names = []
        images = []
        descs = []
        chapters = []
        all_chapters = []
        msg = self.ranobe_percent = 0
        length = len(data['ranobe']['urls'])
        try:
            for i in enumerate(data['ranobe']['urls']):
                if dead == False:
                    raise Exception('extra Close update Ranobe')
                name, img, description, chapter, all = parseRanobe(i[1])
                image = img.split('/')[-1]
                if data['ranobe']['chapters'][i[0]] < float(chapter):
                    c_d = date.today()
                    c_t = strftime("%H:%M", localtime())
                    msg += 1
                    head = f'[R][{c_d.day}/{c_d.month}/{c_d.year} - {c_t}]'
                    body = f'> {name} - new chapter {chapter}\n'
                    note = f'{head} {body}'
                    self.setGlobalSettings(data, 'notify', 'ranobe', note, True)

                if check == False:
                    r = get(img, stream=True)
                    if r.status_code == 200:
                        with open(f'{self.current_path}/description/{image}',
                            'wb') as f:
                            r.raw.decode_content = True
                            copyfileobj(r.raw, f)
                    loadImage(image)
                    data['ranobe']['images'][i[0]] = f'description/{image}'
                    data['ranobe']['names'][i[0]] = name
                    data['ranobe']['description'][i[0]] = description
                data['ranobe']['access-chapters'][i[0]] = chapter
                data['ranobe']['future-chapters'][i[0]] = all
                self.ranobe_percent = int((i[0] + 1) / length * 100)
            if msg > 0:
                system('notify-send "Вышло кое-что новенькое.."')
                data['notify']['notify'] = 'unchecked'
            sleep(2.5)
            self.ranobe_percent = 0
            dead = True
            data['ranobe']['log'] = ''
        except Exception as e:
            data['ranobe']['log'] = f'Error ==>\n{e}' 
            system(f'notify-send "Error for get data about <ranobe>\n{e}"')
        self.setGlobalSettings(data, '', '', '', False, True)
        self.ui.toolButton_26.show() if not check else self.ui.toolButton_31.show()
        self.showed(self.ui.comboBox_6, 2)
        enable = True
        while_var = False


    def checkRanobeUrl(self, flag):
        global enable, while_var, tab_start 
        if enable:
            enable = False
            while_var = True
            tab_start = 2
            data = self.uploadGlobalSettings()
            self.ui.toolButton_31.hide() if flag else self.ui.toolButton_26.hide()
            Thread(target = self.setRanobe, args = (flag, data)).start()


app = QtWidgets.QApplication([])
application = myWindow()
exit(app.exec())
