#!/usr/bin/env python3


from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox, QSystemTrayIcon
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QTimer
from design import Ui_MainWindow
from sys import exit
from requests import get
from os import path, popen
from time import sleep
from main_selenium import allParsing, oneParsing, extraClose
from threading import Thread
from notifications import checking, checkingWrite
from json import dumps, load


class myWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(myWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setFocus()
        self.setGeometry(480, 55, 400, 300)

        self.click = 0
        self.color = 0
        self.timer = QTimer()
        self.timer.timeout.connect(self.timeNumber)
        self.current_path = path.dirname(path.realpath(__file__))
        self.ui.toolButton_11.setIcon(QIcon(f'{self.current_path}/icons/lamp.png'))
        self.tray = QSystemTrayIcon(self)
        self.tray.activated.connect(self.triggerFocus)
        self.tray.setToolTip(u"AnimeVostOrg - parser")
        self.tray.show()
        self.timeNumber()
        self.defaultIcon()
        self.showed()
        
        self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/all-click.png'))
        self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/click.png'))

        self.timer_check = QTimer()
        self.timer_check.timeout.connect(self.update)
        self.update()

        self.ui.toolButton.clicked.connect(self.saved)
        self.ui.toolButton_2.clicked.connect(self.deleted)
        self.ui.toolButton_3.clicked.connect(self.closed)
        self.ui.toolButton_4.clicked.connect(self.allDown)
        self.ui.toolButton_5.clicked.connect(self.oneDown)
        self.ui.toolButton_6.clicked.connect(extraClose)
        self.ui.toolButton_7.clicked.connect(self.loging)
        self.ui.toolButton_8.clicked.connect(self.logOne)
        self.ui.toolButton_9.clicked.connect(self.updateClick)
        self.ui.toolButton_10.clicked.connect(self.notifyCheck)
        self.ui.toolButton_11.clicked.connect(self.modeColorSheme)
        self.ui.toolButton_12.clicked.connect(self.update)


    def keyPressEvent(self, QKeyEvent):
        int_key = QKeyEvent.key()
        print(int_key)
        if int_key == 16777216:
            self.hidded()


    def uploadGlobalSettings(self):
        with open('setting.json', 'r') as reads:
            data = load(reads)
        return data


    def setGlobalSettings(self, to_json: dict, mode: str, var, flag=False, state=False):
        if state:
            pass
        else:
            if flag:
                to_json[mode].append(var)
            else:
                to_json[mode] = var
        with open('setting.json', 'w') as js:
            js.write(f"{dumps(to_json, sort_keys=False, indent=4, ensure_ascii=False, separators=(',', ': '))}")


    def updateClick(self):
        print('Yes')
        self.ui.toolButton_5.setEnabled(False)
        self.ui.toolButton_4.setEnabled(False)
        self.ui.toolButton_12.setEnabled(False)
        self.ui.toolButton_9.setEnabled(False)
        self.ui.toolButton_9.setIcon(QIcon(f'{self.current_path}/icons/list.png'))
        self.ui.toolButton_9.setToolTip(u"Checking..")
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
        Thread(target = self.clicker).start()


    def clicker(self, check=True):
        data = self.uploadGlobalSettings()
        if check:
            checkingWrite(data['urls'], data['series'])
        else:
            checking(data['urls'], data['series'])
        self.ui.toolButton_12.setEnabled(True)
        self.ui.toolButton_9.setEnabled(True)
        self.ui.toolButton_5.setEnabled(True)
        self.ui.toolButton_4.setEnabled(True)

        self.defaultIcon()


    def update(self):
        print('Yes')
        self.timer_check.start(900_000)
        if self.ui.toolButton_12.isEnabled() == False:
            pass
        else:
            self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost-new.webp'))
            Thread(target = self.clicker, args = (False,)).start()
        self.ui.toolButton_5.setEnabled(False)
        self.ui.toolButton_12.setEnabled(False)
        self.ui.toolButton_9.setEnabled(False)
        self.ui.toolButton_4.setEnabled(False)


    def timeNumber(self):
        data = self.uploadGlobalSettings()
        self.timer.start(1000)
        self.ui.lcdNumber.display(data['series'][self.ui.comboBox.currentIndex()])
        if data['notify'] == 'unchecked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notify.png'))
        elif data['notify'] == 'checked':
            self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/bell.png'))



    def notifyCheck(self):
        alert = QMessageBox()
        datas = self.uploadGlobalSettings()    
        if path.exists(path.join(path.dirname(__file__), 'notify.txt')):
            with open('notify.txt', 'r') as f:
                data = f.readlines()
            str = ''
            
            for i in data:
                str = f'{str}{i}'
            
            if len(data) == 0:
                alert.setGeometry(600, 95, 300, 100)
                alert.setText("No notifications..")
            else:
                alert.setGeometry(490, 95, 300, 100)
                alert.setText(str)
                self.setGlobalSettings(datas, 'notify', 'checked')
        else:
            alert.setText('No log file..')
        alert.exec_()


    def modeColorSheme(self):
        data = self.uploadGlobalSettings()
        if self.color % 2 == 0:
            self.changeSheme('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)', 'color: rgb(136, 136, 136)')
            self.ui.toolButton_11.setToolTip(u"Darkmode")
            self.setGlobalSettings(data, 'mode', 'darkmode')
        else:
            self.changeSheme('lamp', 'background: rgb(255, 255, 255)', 'background: rgb(220, 220, 220)', 'color: rgb(0, 0, 0)')
            self.ui.toolButton_11.setToolTip(u"Lightmode")
            self.setGlobalSettings(data, 'mode', 'lightmode')
        self.color += 1


    def changeSheme(self, ico, win, back, color):
        self.ui.toolButton_11.setIcon(QIcon(f'{self.current_path}/icons/{ico}.png'))
        self.setStyleSheet(win)
        self.ui.label.setStyleSheet(color)
        self.ui.label_2.setStyleSheet(color)
        self.ui.lineEdit.setStyleSheet(back)
        self.ui.comboBox.setStyleSheet(back)
        self.ui.spinBox.setStyleSheet(back)
        self.ui.lcdNumber.setStyleSheet(back)


# Set Icon for toolButton
    def defaultIcon(self):
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost.png'))
        self.ui.toolButton_6.setIcon(QIcon(f'{self.current_path}/icons/lose.png'))
        self.ui.toolButton_7.setIcon(QIcon(f'{self.current_path}/icons/log.png'))
        self.ui.toolButton_8.setIcon(QIcon(f'{self.current_path}/icons/log-one.png'))
        self.ui.toolButton_9.setIcon(QIcon(f'{self.current_path}/icons/circle.png'))
        self.ui.toolButton_12.setIcon(QIcon(f'{self.current_path}/icons/checking.png'))
        self.ui.toolButton_7.setToolTip(u"Log All parse URL")
        self.ui.toolButton_8.setToolTip(u"Log One parse URL")
        self.ui.toolButton_9.setToolTip(u"Update")
        self.ui.lcdNumber.setToolTip(u"Current Series")


    def check(self):
        proc = popen('ps ax').read()
        if proc.find("chromedriver") == -1:
            return False
        else:
            print("процесс висит")
            return True


    def whileStart(self):
        while True:
            if self.check():
                self.ui.toolButton_5.setEnabled(False)
                self.ui.toolButton_4.setEnabled(False)
                self.ui.toolButton_12.setEnabled(False)
                self.ui.toolButton_9.setEnabled(False)
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
            else:
                self.defaultIcon()
                self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/all-click.png'))
                self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/click.png'))
                self.ui.toolButton_12.setEnabled(True)
                self.ui.toolButton_5.setEnabled(True)
                self.ui.toolButton_4.setEnabled(True)
                self.ui.toolButton_9.setEnabled(True)
                break
            sleep(1)


    def loging(self):
        alert = QMessageBox()
        text = ''
        data = self.uploadGlobalSettings()
        if len(data['logs']) != 0:
            for i in data['logs']:
                text = f'{text}{i}'
            alert.setText(text)
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def logOne(self):
        alert = QMessageBox()
        data = self.uploadGlobalSettings()
        if data['log'] != '':
            alert.setText(data['log'])
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def oneDown(self):
        data = self.uploadGlobalSettings()
        self.ui.toolButton_5.setIcon(QIcon(f'{self.current_path}/icons/spinner.png'))
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
        Thread(target = oneParsing, args = (data['urls'][self.ui.comboBox.currentIndex()], self.ui.lcdNumber.intValue()), daemon = True).start()
        Thread(target = self.whileStart).start()


    def allDown(self):
        self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
        self.ui.toolButton_4.setIcon(QIcon(f'{self.current_path}/icons/spinner.png'))
        Thread(target = allParsing).start()
        Thread(target = self.whileStart).start()


    def triggerFocus(self, reason):
        if reason == QSystemTrayIcon.Trigger:
            if self.click % 2 == 0:
                self.setFocus()
                self.show()
            else:
                self.hidded()
            self.click += 1
        # elif reason == QSystemTrayIcon.MiddleClick:


    def hidded(self):
        self.hide()


    def closed(self):
        extraClose()
        self.close()


    def saved(self):
        url = self.ui.lineEdit.text()
        print(url)
        series = self.ui.spinBox.value()
        try:
            get(url)
            data = self.uploadGlobalSettings()
            self.setGlobalSettings(data, 'urls', url, True)
            self.setGlobalSettings(data, 'series', series, True)
            self.ui.comboBox.addItem(url)
        except:
            alert = QMessageBox()
            alert.setText(f"URL does not exist on Internet")
            alert.exec_()
            self.ui.lineEdit.setText('')


    def showed(self):
        reads = self.uploadGlobalSettings()
        
        for i in reads['name']:
            self.ui.comboBox.addItem(i)

        if path.exists(path.join(path.dirname(__file__), 'notify.txt')):
            if reads['notify'] == 'unchecked':
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/notify.png'))
            elif reads['notify'] == 'checked':
                self.ui.toolButton_10.setIcon(QIcon(f'{self.current_path}/icons/bell.png'))

        if reads['mode'] == 'lightmode':
            self.changeSheme('lamp', 'background: rgb(255, 255, 255)', 'background: rgb(220, 220, 220)', 'color: rgb(0, 0, 0)')
            self.ui.toolButton_11.setToolTip(u"Lightmode")
            self.color = 0
        elif reads['mode'] == 'darkmode':
            self.changeSheme('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)', 'color: rgb(136, 136, 136)')
            self.ui.toolButton_11.setToolTip(u"Darkmode")
            self.color = 1


    def deleted(self):
        index = self.ui.comboBox.currentIndex()
        data = self.uploadGlobalSettings()

        del(data['urls'][index])
        del(data['series'][index])

        try:
            del(data['name'][index])
        except:
            print('error name link!!!')

        self.setGlobalSettings(data, '', '', False, True)
        self.ui.comboBox.clear()
        self.showed()


app = QtWidgets.QApplication([])
application = myWindow()
# application.show()

exit(app.exec())
