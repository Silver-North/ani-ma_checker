#!/usr/bin/env python3


from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QMessageBox, QSystemTrayIcon
from PyQt5.QtGui import QIcon, QPixmap, QMovie
from PyQt5.QtCore import QTimer, QThread, pyqtSignal
from QLed import QLed
from design import Ui_MainWindow
from sys import exit
from requests import get
from selenium import webdriver
from selenium.webdriver.common.by import By
from shutil import copyfileobj
from urllib import request as url_request
from genericpath import isfile
from webbrowser import open as open_url
from os import listdir, path, popen, system, rename
from time import sleep, localtime, strftime
from threading import Thread
from notifications import (checkURL, getDescription, loadImage, 
                           checkFixedOutput, parseRanobe)
from json import dumps, load
from pyttsx3 import init
from validators import url as check_url
from datetime import date
from random import randint
from alive_progress import alive_bar


dead = enable = checker_tag = True
update_list_anime = down = while_var = False
checklist = ()
tab_start = None


class ThreadProgress(QThread):
    _signal = pyqtSignal(int)
    def __init__(self, data, flag=True):
        super(ThreadProgress, self).__init__()
        self.flag = flag
        self.data = data
        self.current_path = path.dirname(path.realpath(__file__))
        self.check = 0


    def __del__(self):
        self.wait()


    def run(self):
        self.check = 0
        global dead, checker_tag, update_list_anime, enable
        checker_tag = enable = False
        dead = True
        if self.flag:
            title = 'Checking -> '
        else:
            title = 'Updating -> '
        name = []
        try:
            with alive_bar(len(self.data['anime']['urls']), title=title) as bar:
                for i in enumerate(self.data['anime']['urls']):
                    if not dead:
                        raise Exception('Extra close Thread..')
                    series = self.data['anime']['series'][i[0]] + 1
                    ova = self.data['anime']['ova'][i[0]] + 1
                    names, check_output = checkURL(self.data, i[1], series, ova)
                    if check_output:
                        self.check += 1
                    if names == '':
                        raise Exception('ERROR FOR URL_CHECK..')
                    if self.flag == False:
                        if 'description/' in self.data['anime']['images'][i[0]]:
                            pass
                        else:
                            img, desc = getDescription(i[1])
                            self.data['anime']['images'][i[0]] = f'description/{img}'
                            self.data['anime']['description'][i[0]] = desc
                        name.append(names)
                    index = i[0] + 1
                    percent = int(index / len(self.data['anime']['urls']) * 100)
                    self._signal.emit(percent)
                    update_list_anime = True
                    bar()

            if isinstance(self.data, dict) and self.flag == False:
                self.data['anime']['name'] = name
                with open(f'{self.current_path}/setting.json', 'w') as js:
                    js.write(dumps(self.data, sort_keys=False, indent=4,
                                ensure_ascii=False, separators=(',', ': ')))
        except Exception as e:
            print('Error ==>\n', e)
            system(f'notify-send "Error checking anime\n{e}"')

        print(self.check)
        if self.check > 0:
            self.data['notify']['notify'] = 'unchecked'
            if isinstance(self.data, dict):
                with open(f'{self.current_path}/setting.json', 'w') as js:
                    js.write(dumps(self.data, sort_keys=False, indent=4,
                                ensure_ascii=False, separators=(',', ': ')))
            tts = init()
            tts.say("Something new came out... check the natification log...")
            tts.runAndWait()
            system('notify-send "Вышло кое-что новенькое!!!"')
        
        sleep(1)
        percent = 0
        self._signal.emit(percent)
        del(self.check)
        checker_tag = True


class myWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(myWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setFocus()
        self.setGeometry(480, 55, 400, 300)

        self.flag = True
        self.check_flag = False
        self.click = 0
        self.percent = 0
        self.percent_all_anime = 0
        self.percent_all_manga = 0
        self.percent_desc_manga = 0
        self.ranobe_percent = 0
        self.color = 0
        self.current_path = path.dirname(path.realpath(__file__))
        self.ui.tabWidget.setCurrentIndex(0)
        self.path_down = f'{self.current_path}/downloads'
        self.prefs = {'download.default_directory': self.path_down,
                      'download.prompt_for_download': False}
        self.option = webdriver.ChromeOptions()
        self.option.add_argument('--headless')
        self.option.add_experimental_option("prefs", self.prefs)
        self.sheme = (
            ('dark', 'background: rgb(49, 49, 49)', 'background: rgb(136, 136, 136)'),
            ('lamp', 'background: #FFFFFF', 'background: #FFFFFF')
        )

        self.timer = QTimer()
        self.timer.timeout.connect(self.everySecond)
        self.timer.start(1000)

        self.ui.toolButton_24.setStyleSheet('border: none;')
        self.ui.toolButton_10.setStyleSheet('border: none;')
        self.ui.toolButton_11.setStyleSheet('border: none;')
        self.ui.progressBar.setStyleSheet('selection-background-color: #00e916; \
            background-image: linear-gradient(160deg, #00e916 0%, #3dffe9 75%);')
        self.ui.progressBar_2.setStyleSheet('selection-background-color: #8BC6EC; \
            background-image: linear-gradient(135deg, #8BC6EC 0%, #9599E2 100%);')
        self.ui.progressBar_3.setStyleSheet('selection-background-color: #FFE53B; \
            background-image: linear-gradient(22deg, #FFE53B 0%, #FF2525 82%);')
        self.ui.progressBar_7.setStyleSheet('selection-background-color: #FF3CAC; \
            background-image: linear-gradient(219deg, #FF3CAC 4%, \
            #784BA0 44%, #2B86C5 100%);')


        self.movie = QMovie(f"{self.current_path}/icons/free.gif")
        self.labels_movie = (self.ui.label_2, self.ui.label_3, self.ui.label_4,
            self.ui.label_8, self.ui.label_9, self.ui.label_10, self.ui.label_11)
        gen = (self.ui.toolButton_2, self.ui.toolButton_19, self.ui.toolButton_29,
               self.ui.toolButton_8, self.ui.toolButton_13, self.ui.toolButton_27,
               self.ui.toolButton_21, self.ui.toolButton_30, self.ui.toolButton,
               self.ui.toolButton_15, self.ui.toolButton_32)
        for i in enumerate(self.labels_movie):
            i[1].setMovie(self.movie)
        
        self.tray = QSystemTrayIcon(self)
        self.tray.activated.connect(self.triggerFocus)
        self.tray.show()

        self.led = QLed(self, onColour=QLed.Green, shape=QLed.Circle)
        self.led.setGeometry(370, 135, 12, 12)

        self.defaultIcon()
        self.checkModeSheme()

        self.showed()
        self.viewRanobe()

        self.showCombo()
        self.swithDescription()
        self.viewDescription()
        self.updateNumber()
        self.upComboAnime()
        self.upComboRanobe()
        self.comboTracker()

        self.ui.comboBox.activated[str].connect(self.upComboAnime)
        self.ui.comboBox_2.activated[str].connect(self.updateNumber)
        self.ui.comboBox_3.activated[str].connect(self.viewDescription)
        self.ui.comboBox_4.activated[str].connect(self.swithDescription)
        self.ui.comboBox_6.activated[str].connect(self.upComboRanobe)

        self.timer_check = QTimer()
        self.timer_check.timeout.connect(self.checkItems)
        self.checkItems()

#### << Main-module >> ####
        self.ui.toolButton_3.clicked.connect(self.closed)
        self.ui.toolButton_6.clicked.connect(self.stoped)
        self.ui.toolButton_10.clicked.connect(self.notifyCheck)
        self.ui.toolButton_11.clicked.connect(self.modeColorSheme)
        self.ui.toolButton_18.clicked.connect(self.openURL)
        self.ui.toolButton_24.clicked.connect(self.aboutInfo)
        for i in enumerate(gen):
            i[1].clicked.connect(self.deleted) if i[0] in (0,1,2) else \
            i[1].clicked.connect(self.loged) if  i[0] in (3,4,5) else \
            i[1].clicked.connect(self.edited) if  i[0] in (6,7) else \
            i[1].clicked.connect(self.saved)
#### << Anime-module >> ####
        self.ui.toolButton_5.clicked.connect(self.oneDown)
        self.ui.toolButton_9.clicked.connect(self.updateClick)
        self.ui.toolButton_12.clicked.connect(self.checkItems)
#### << Manga-module >> ####
        self.ui.toolButton_17.clicked.connect(self.currentUpdate)
        self.ui.toolButton_20.clicked.connect(self.updateClickManga)
#### << Ranobe-module >> ####
        self.ui.toolButton_26.clicked.connect(self.updateRanobeUrl)
        self.ui.toolButton_31.clicked.connect(self.checkRanobeUrl)
        

#### <<< Main-module >>> ####
    def keyPressEvent(self, QKeyEvent):
        int_key = QKeyEvent.key()
        print(int_key)
        if int_key == 16777216:
            self.hidded()
            self.click += 1


    def uploadGlobalSettings(self):
        try:
            with open(f'{self.current_path}/setting.json', 'r') as reads:
                data = load(reads)
        except Exception as e:
            print(f'Error upload setting.json..\n{e}')
            system(f'notify-send "Error upload settitng.json\n{e}"')

            with open(f'{self.current_path}/default.json', 'r') as reads:
                data = load(reads)
        return data


    def setGlobalSettings(self, to_json, tab, mode, var, flag=False, state=False):
        if state:
            pass
        else:
            if flag:
                if tab == "":
                    to_json[mode].append(var)
                else:
                    to_json[tab][mode].append(var)
            else:
                if tab == '':
                    to_json[mode] = var
                else:
                    to_json[tab][mode] = var
        if isinstance(to_json, dict):
            with open(f'{self.current_path}/setting.json', 'w') as js:
                js.write(dumps(to_json, sort_keys=False, indent=4,
                            ensure_ascii=False, separators=(',', ': ')))
            with open(f'{self.current_path}/default.json', 'w') as js:
                js.write(dumps(to_json, sort_keys=False, indent=4,
                            ensure_ascii=False, separators=(',', ': ')))
        else:
            system(f'notify-send "Error setting Global...\
                   no update file <setting.json>"')
            print('Error setting Global.. no update file <setting.json>')


    def startMovie(self):
        self.movie.start()


    def stopMovie(self):
        self.movie.stop()


    def stoped(self):
        self.extraClose()


    def hidded(self):
        self.hide()
        self.click += 1


    def extraClose(self):
        global dead
        dead = False
        system('killall chromedriver')
        self.defaultIcon()


    #### TODO ####
    def aboutInfo(self):
        alert = QMessageBox()
        # print(self.timeNumber.cache_info())
        # print(self.variableTime())
        alert.exec_()


#<<<<!>>>> Function worker every second
    def variableTime(self):
        global checker_tag, update_list_anime, enable, tab_start, down, while_var 
        data = self.uploadGlobalSettings()['notify']['notify']
        index = self.ui.tabWidget.currentIndex()
        checkbox = False
        
        self.flag = False if while_var else True
        
        if self.check_proc() == False:
            if tab_start == 0:
                self.ui.toolButton_5.show()
            if tab_start == 1:
                self.ui.toolButton_17.show()
                self.ui.toolButton_20.show()
        
        if self.ui.checkBox_2.isChecked():
            checkbox = True
        
        return (data, enable, checkbox, checker_tag,
                update_list_anime, index, tab_start, self.percent_all_anime,
                self.percent, self.percent_all_manga, self.ranobe_percent,
                while_var, down)


    def everySecond(self):
        self.timeNumber(*self.variableTime())


    def timeNumber(self, data, enable, checkbox, checker_tag,
                   update_list, index, tabs, anime_percent, percent,
                    percent_manga, ranobe_percent, var, down):
        global update_list_anime, checklist
        
        inputs = (data, enable, checkbox, checker_tag,
                  update_list, index, tabs, anime_percent,
                  percent, percent_manga, ranobe_percent, var, down)
        if checklist == inputs:
            pass
        else:            
            dict_funcs = {
                0: self.wrapperData,
                1: self.wrapperEnable,
                2: self.wrapperCheckbox,
                4: self.wrapperUpdateList,
                8: lambda e: self.ui.progressBar.setValue(e),
                9: lambda e: self.ui.progressBar_3.setValue(e),
                10: lambda e: self.ui.progressBar_7.setValue(e)
            }
            for i in range(len(inputs)):
                if len(checklist) == 0 or checklist[i] != inputs[i]:
                    self.iconTab(index, tabs, var, down) if i in (5,6,11,12) else \
                    self.wrapperCheckerTag(inputs[3], inputs[7]) if i in (3,7) else \
                    dict_funcs[i](inputs[i])
            checklist =inputs


    def iconTab(self, index, tab_start, while_var=False, down=False):
        if self.flag:
            if index == 0:
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/animevost.png'))
                self.tray.setToolTip('AnimeVost tracker')
                self.ui.toolButton_24.setToolTip('https://www.animevost.org\
                    \nhttps://www.animevost.am\nhttps://v2.vost.pw/\nChecking site..')
            elif index == 1:
                self.tray.setToolTip('Manga tracker')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask.png'))
                self.ui.toolButton_24.setToolTip('https://www.manga-chan.me\
                    \nhttps://www.readmanga.io\nhttps://www.mintmanga.live\
                    \nChecking site,,')
            elif index == 2:
                self.tray.setToolTip('Ranobe tracker')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/ranobe.png'))
                self.ui.toolButton_24.setToolTip('several site..')
            elif index == 3:
                self.tray.setToolTip('View description')
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/a-desc.png'))
                self.ui.toolButton_24.setToolTip('About')
        else:
            if tab_start == 0:
                if while_var and down:
                    self.tray.setIcon(QIcon(f'{self.current_path}/icons/dow.png'))
                else:
                    self.tray.setIcon(QIcon(
                        f'{self.current_path}/icons/animevost-new.webp'))
            if tab_start == 1:
                self.tray.setIcon(QIcon(f'{self.current_path}/icons/mask-0.png'))
#<<<<!>>>>
            

    def wrapperData(self, data):
        if data == 'unchecked':
            self.ui.toolButton_10.setIcon(
                QIcon(f'{self.current_path}/icons/notify.png'))
        elif data == 'checked':
            self.ui.toolButton_10.setIcon(
                QIcon(f'{self.current_path}/icons/notification.png'))
        elif data == 'empty':
            self.ui.toolButton_10.setIcon(
                QIcon(f'{self.current_path}/icons/bell.png'))


    def wrapperEnable(self, enable):
        if enable:
            self.stopMovie()
            self.led.value = False
            self.led.setToolTip('Not Working..')
        else:
            self.startMovie()
            self.led.value = True
            self.led.setToolTip('Working..')
    

    def wrapperCheckbox(self, checkbox):
        if checkbox:
            self.ui.toolButton_5.setIcon(
                QIcon(f'{self.current_path}/icons/all-click.png'))
            self.ui.toolButton_5.setToolTip('Download All Elements')
        else:
            self.ui.toolButton_5.setIcon(
                QIcon(f'{self.current_path}/icons/click.png'))
            self.ui.toolButton_5.setToolTip('Download Current Element')
    

    def wrapperCheckerTag(self, checker_tag, anime_percent):
        if checker_tag:
            self.ui.progressBar_2.setValue(anime_percent)
        else:
            self.percent_all_anime = 0
    

    def wrapperUpdateList(self, update_list):
        global update_list_anime
        if update_list:
            self.showed()
            update_list_anime = False



    def notifyCheck(self):
        alert = QMessageBox()
        data = self.uploadGlobalSettings()

        if self.emptyNotify(data):
            data['notify']['notify'] = 'empty'
            alert.setGeometry(600, 95, 300, 100)
            alert.setText("No notifications..")
        else:
            str_ = []
            if len(data['notify']['anime']) > 0:
                str_.append(''.join(data['notify']['anime']))
            if len(data['notify']['manga']) > 0:
                str_.append(''.join(data['notify']['manga']))
            if len(data['notify']['ranobe']) > 0:
                str_.append(''.join(data['notify']['ranobe']))
            str = "\n".join(str_)
            alert.setGeometry(420, 95, 300, 100)
            alert.setText(str)
            data['notify']['notify'] = 'checked'
        self.setGlobalSettings(data, '', '', '', False, True)
        alert.exec_()


    def modeColorSheme(self):
        data = self.uploadGlobalSettings()
        if self.color % 2 == 0:
            self.changeSheme(*self.sheme[0])
            self.setGlobalSettings(data, '', 'mode', 'darkmode')
        else:
            self.changeSheme(*self.sheme[1])
            self.setGlobalSettings(data, '', 'mode', 'lightmode')
        self.color += 1


    def checkModeSheme(self):
        reads = self.uploadGlobalSettings()
        if reads['mode'] == 'lightmode':
            self.changeSheme(*self.sheme[1])
            self.color = 0
        elif reads['mode'] == 'darkmode':
            self.changeSheme(*self.sheme[0])
            self.color = 1

        if reads['notify']['notify'] == 'empty':
            self.ui.toolButton_10.setIcon(QIcon(
                f'{self.current_path}/icons/bell.png'))
        elif reads['notify']['notify'] == 'unchecked':
            self.ui.toolButton_10.setIcon(QIcon(
                f'{self.current_path}/icons/notify.png'))
        elif reads['notify']['notify'] == 'checked':
            self.ui.toolButton_10.setIcon(QIcon(
                f'{self.current_path}/icons/notification.png'))


### << Mode color sheme < Black | White > >> ###
    def changeSheme(self, ico, win, back):
        self.setStyleSheet(win)
        list_back = (
            self.ui.lineEdit, self.ui.lineEdit_2, self.ui.lineEdit_3,
            self.ui.textEdit, self.ui.comboBox, self.ui.comboBox_2,
            self.ui.comboBox_3, self.ui.comboBox_4, self.ui.comboBox_6,
            self.ui.comboBox_7, self.ui.spinBox, self.ui.doubleSpinBox,
            self.ui.doubleSpinBox_2, self.ui.lcdNumber, self.ui.lcdNumber_2,
            self.ui.lcdNumber_3, self.ui.lcdNumber_4, self.ui.lcdNumber_5,
            self.ui.lcdNumber_6, self.ui.toolButton_11, self.ui.toolButton_24
        )
        ls = (
            QIcon(f'{self.current_path}/icons/{ico}.png'), 
            QIcon(f'{self.current_path}/icons/{ico}-about.png')
        )
        list_check = (self.ui.checkBox, self.ui.checkBox_2)
        for i in enumerate(list_back):
            i[1].setIcon(ls[0]) if i[0] == 19 else \
            i[1].setIcon(ls[1]) if i[0] == 20 else \
            i[1].setStyleSheet(back)

        if ico == 'lamp':
            tool = 'Lightmode'
            style = 'border-color: #0b76ef; background-color: #0b76ef;'
        elif ico == 'dark':
            tool = 'Darkmode'
            style = 'border-color: #8B33B5; background-color: #8B33B5;'
        list_back[-2].setToolTip(tool)
        for i in list_check:
            i.setStyleSheet(style)


# Set Icon for toolButton
    def defaultIcon(self):
        list_tab = ('animevost.png', 'mask.png', 'ranobe.png', 'a-desc.png')
        for i in enumerate(list_tab):
            str = f'{self.current_path}/icons/{i[1]}'
            self.ui.tabWidget.setTabIcon(i[0], QIcon(str))
            if i[0] < 3:
                self.ui.comboBox_4.setItemIcon(i[0], QIcon(str))
        list_tool = (
            self.ui.toolButton_2, self.ui.toolButton_19, self.ui.toolButton_29,
            self.ui.toolButton_9, self.ui.toolButton_26, self.ui.toolButton_20,
            self.ui.toolButton_8, self.ui.toolButton_27, self.ui.toolButton_13,
            self.ui.toolButton, self.ui.toolButton_15, self.ui.toolButton_32,
            self.ui.toolButton_17, self.ui.toolButton_12, self.ui.toolButton_31,
            self.ui.toolButton_21, self.ui.toolButton_30, self.ui.toolButton_7,
            self.ui.toolButton_4, self.ui.toolButton_18, self.ui.toolButton_3,
            self.ui.toolButton_6
        )
        lists = ('trash', 'circle', 'log-one', 'diskette', 'checking', 'edit',
                 'checkbox-1', 'checkbox-2', 'web', 'close', 'lose')
        list_icon = [QIcon(f'{self.current_path}/icons/{i}.png') for i in lists]
        for i in enumerate(list_tool):
            i[1].setIcon(list_icon[0]) if i[0] in (0,1,2) else \
            i[1].setIcon(list_icon[1]) if i[0] in (3,4,5) else \
            i[1].setIcon(list_icon[2]) if i[0] in (6,7,8) else \
            i[1].setIcon(list_icon[3]) if i[0] in (9,10,11) else \
            i[1].setIcon(list_icon[4]) if i[0] in (12,13,14) else \
            i[1].setIcon(list_icon[5]) if i[0] in (15,16) else \
            i[1].setIcon(list_icon[6]) if i[0] == 17 else \
            i[1].setIcon(list_icon[7]) if i[0] == 18 else \
            i[1].setIcon(list_icon[8]) if i[0] == 19 else \
            i[1].setIcon(list_icon[9]) if i[0] == 20 else \
            i[1].setIcon(list_icon[10])
            i[1].setToolTip('Exit') if i[0] == 20 else False


    def check_proc(self):
        proc = popen('ps ax').read()
        if proc.find("chromedriver") == -1:
            return False
        else:
            return True


    def triggerFocus(self, reason):
        if (reason == QSystemTrayIcon.Trigger or
            reason == QSystemTrayIcon.MiddleClick):
            if self.click % 2 == 0:
                self.setFocus()
                self.show()
            else:
                self.hide()
            self.click += 1


    def closed(self):
        alert = QMessageBox()
        alert.setIcon(QMessageBox.Information)
        alert.setText('Do you really want to leave?')
        alert.setGeometry(541, 107, 200, 200)
        alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        rezult = alert.exec()

        if rezult == QMessageBox.Ok:
            self.extraClose()
            self.close()


    def openURL(self):
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        child = 'urls'
        if tab == 0:
            mode = 'anime'
            if self.ui.checkBox.isChecked():
                child = 'track-link'
                index = self.ui.comboBox_7.currentIndex()
            else:
                index = self.ui.comboBox.currentIndex()
        if tab == 1:
            mode = 'manga'
            index = self.ui.comboBox_2.currentIndex()
        if tab == 2:
            mode = 'ranobe'
            index = self.ui.comboBox_6.currentIndex()
        if tab == 3:
            mode = self.ui.comboBox_4.currentText()
            index = self.ui.comboBox_3.currentIndex()
        if len(data[mode][child]) > 0:
            open_url(data[mode][child][index])
        else:
            system(f'notify-send "List <{mode}> is empty"')


    def deleted(self):
        global enable
        if enable:
            enable = False
            data = self.uploadGlobalSettings()
            tab = self.ui.tabWidget.currentIndex()
    
            alert = QMessageBox()
            alert.setIcon(QMessageBox.Information)
            alert.setText('Are you sure you want to delete this entry?')
            alert.setGeometry(514, 107, 200, 200)
            alert.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

            catch = 'log'
            throw = 'names'
            if tab == 0:
                mode = 'anime'
                throw = 'name'
                icon = 'icons/animevost.png'
                index = self.ui.comboBox.currentIndex()
            elif tab == 1:
                mode = 'manga'
                catch = 'logs'
                icon = 'icons/mask.png'
                index = self.ui.comboBox_2.currentIndex()
            elif tab == 2:
                mode = 'ranobe'
                icon = 'icons/ranobe.png'
                index = self.ui.comboBox_6.currentIndex()

            rezult = alert.exec()
            if rezult == QMessageBox.Ok:
                remove = f'rm {self.current_path}/{data[mode]["images"][index]}'
                system(remove) if  data[mode]["images"][index] != icon else True
                self.checkNotify(data, mode, data[mode][throw][index])
                for i in data[mode]:
                    if i == catch:
                        continue
                    del(data[mode][i][index])
                self.setGlobalSettings(data, '', '', '', False, True)
    
                if self.ui.comboBox_4.currentIndex() == tab:
                    self.ui.comboBox_3.clear()
                    self.ui.comboBox_4.setCurrentIndex(tab)
                if mode == 'anime':
                    self.showed()
                elif mode == 'manga':
                    self.showCombo()
                elif mode == 'ranobe':
                    self.viewRanobe()
            enable = True


    def loged(self):
        alert = QMessageBox()
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        log = 'logs' if tab == 1 else 'log'
        mode = 'anime' if tab == 0 else 'manga' if tab == 1 else 'ranobe'
        if len(data[mode][log]) > 0:
            text = '\n'.join(data[mode][log]) if log == 'logs' else data[mode][log]
            alert.setText(text)
        else:
            alert.setText('No file exist...')
        alert.exec_()


    def edited(self):
        tab = self.ui.tabWidget.currentIndex()
        data = self.uploadGlobalSettings()
        if tab == 1:
            value = self.ui.doubleSpinBox.value()
            index = self.ui.comboBox_2.currentIndex()
            text = self.ui.comboBox_2.currentText()
            child = 'manga'
            chapter = 'numbers'
        if tab == 2:
            value = self.ui.doubleSpinBox_2.value()
            index = self.ui.comboBox_6.currentIndex()
            text = self.ui.comboBox_6.currentText()
            child = 'ranobe'
            chapter = 'chapters'
        if value != 0.0:
            decimal = int(str(value).split('.')[1])
            value = int(value) if decimal == 0 else float(value)
            data[child][chapter][index] = value
            self.checkNotify(data, child, text, value)
            data['notify']['notify'] = 'empty' if self.emptyNotify(data) else \
                                       data['notify']['notify']
            self.setGlobalSettings(data, '', '', '', False, True)
            if child == 'manga':
                self.ui.doubleSpinBox.setValue(0)
                self.updateNumber()
            else:
                self.ui.doubleSpinBox_2.setValue(0)
                self.upComboRanobe()


    def checkNotify(self, data, child, text, value = None, check = True):
        if value is None:
            tmp = f'{text} - new '
        else:
            if check:
                tmp = f'{text} - new chapter {value}'
            else:
                tmp = f'{text} - new series {value}'
        temp = f'{text} - new ova-{value}'
        while True:
            for i in range(len(data['notify'][child])):
                if tmp in data['notify'][child][i]:
                    del(data['notify'][child][i])
                    break
                if temp in data['notify'][child][i]:
                    del(data['notify'][child][i])
                    break
            else:
                break


    def emptyNotify(self, data):
        if (len(data['notify']['anime']) == 0 and
            len(data['notify']['manga']) == 0 and
            len(data['notify']['ranobe']) == 0):
            self.ui.toolButton_10.setIcon(QIcon(
                    f'{self.current_path}/icons/empty.png'))
            return True
        else:
            return False


    def saved(self):
        global enable
        if enable:
            enable = False
            tab = self.ui.tabWidget.currentIndex()
            data = self.uploadGlobalSettings()
            name = 'names'
            mode = 'anime' if tab == 0 else 'manga' if tab == 1 else 'ranobe'
            mask = 'animevost' if tab == 0 else 'mask' if tab == 1 else 'ranobe'
            icon = QIcon(f'{self.current_path}/icons/{mask}.png')
            title = ''
            if tab == 0:
                name = 'name'
                series = self.ui.spinBox.value()
                catch = ('log', 'track-name', 'track-link')
                edit = self.ui.lineEdit
                if self.ui.checkBox.isChecked():
                    track = self.ui.comboBox_7.currentIndex()
                    url = data['anime']['track-link'][track]
                    title = self.ui.comboBox_7.currentText().split(' / ')[0]
                else:
                    url = edit.text()
                combobox = self.ui.comboBox
                dict_add = {0: url, 1: series, 2: 0, 3: title, 5: '',
                            6: 'icons/animevost.png'}
            elif tab == 1:
                combobox = self.ui.comboBox_2
                edit = self.ui.lineEdit_2
                url = edit.text()
                catch = 'logs'
                series = self.ui.doubleSpinBox.value()
                dict_add = {0: url, 1: series, 2: 0, 3: '', 6: '', 5: 'icons/mask.png'}
            elif tab == 2:
                edit = self.ui.lineEdit_3
                url = edit.text()
                combobox = self.ui.comboBox_6
                catch = 'log'
                series = self.ui.doubleSpinBox_2.value()
                dict_add = {0: url, 2: series, 3: 0, 4: 0, 1: title, 5: '',
                            6: 'icons/ranobe.png'}
            if check_url(url):
                edit.setStyleSheet('background: rgb(98, 255, 59)')
                for i in enumerate(data[mode]):
                    if i[1] in catch:
                        continue
                    data[mode][i[1]].append(dict_add[i[0]])
                combobox.addItem(title)
                combobox.setItemIcon(len(data[mode][name])-1, icon)
                self.setGlobalSettings(data, '', '', '', False, True)
            else:
                system(f'notify-send "Error add {mode}"')
                edit.setStyleSheet('background: rgb(236, 0, 0)')
                edit.setText('  ERROR check URL..')
            Thread(target = self.editLineEdit, args = (edit,)).start()
            enable = True


####<<< Anime-module >>>####
    def oneParsing(self, data, url, digit, index = 0):
        global dead, while_var, enable
        dead = True
        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'),
                                  options=self.option)
        urls = data['anime']['urls']
        try:
            self.percent_all_anime = 5
            series = digit + 1
            driver.get(url)
            self.percent_all_anime = 15
            sleep(3)
            search_count_series = driver.find_elements(By.CLASS_NAME, 'epizode')
            name = driver.find_element(By.CLASS_NAME, 'shortstoryHead').text
            next = driver.find_element(By.CLASS_NAME, 'next')
            name_dir = name.split(' /')
            self.percent_all_anime = 35
            series += data['anime']['ova'][urls.index(url)]

            def continueDownload(count = 0, repeat = False):
                nonlocal search_count_series, series, name, next, name_dir, data
                if series > 6:
                    next.click()
                    if series > 12:
                        next.click()
                        if series > 18:
                            next.click()
                            if series > 24:
                                next.click()
                self.percent_all_anime = 40

                if count == 0:
                    step = -1
                else:
                    step = series - 1

                if data['anime']['ova'][urls.index(url)] > 0:
                    num = -(data['anime']['ova'][urls.index(url)]+1)
                    while True:
                        click_i = search_count_series[num].text
                        if click_i != '':
                            break
                    search_count_series[num].click()
                elif data['anime']['ova'][urls.index(url)] == 0:
                    while True:
                        click_i = search_count_series[step].text
                        if click_i != '':
                            break
                    search_count_series[step].click()

                sleep(15)
                iframe = driver.find_elements(By.TAG_NAME, 'iframe')
                for item in range(len(iframe)):
                    driver.switch_to.frame(iframe[item])
                    sleep(0.4)
                    down = driver.find_elements(By.CLASS_NAME, 'butt')
                    if len(down) != 4:
                        sleep(0.3)
                        driver.switch_to.default_content()
                        continue
                    else:
                        break
                self.percent_all_anime = 55
                sleep(3)
                let = down[-2].get_attribute("href").split('?')
                let = let[0].split('/')
                self.percent_all_anime = 65
                sleep(3)
                self.check_flag = False
                self.Download(down[2].get_attribute('href'), let[-1], urls,
                              name_dir[0], url, name, series, data, click_i)
                self.percent_all_anime = 97
                log = f'{name_dir[0]} - New series {series}'
                driver.switch_to.default_content()
                if repeat:
                    series += 1
                    if len(search_count_series) - series > 0:
                        continueDownload(len(search_count_series) - series, True)
                    else:
                        continueDownload(len(search_count_series) - series)
        
            if len(search_count_series) == series:
                continueDownload()
            elif len(search_count_series) > series:
                continueDownload(len(search_count_series) - series, True)
            else:
                log = f'{name_dir[0]} - No new < {series} > series'

        except Exception as e:
            system(f'notify-send "Error one-down\n<< {e} >>"')
            log = f"!!! << Error: {e} >> !!!"
            print(f"!!! << Error: {e} >> !!!")

        driver.quit()
        if index == 0:
            while_var = False
            enable = True
        data['anime']['log'] = log
        self.setGlobalSettings(data, 'anime', 'log', log)
        self.percent_all_anime = 100
        if self.percent_all_anime == 100:
            self.ui.progressBar_2.setFormat('Completed')
        sleep(2)
        dead = False
        self.percent_all_anime = 0
        sleep(0.5)
        dead = True
        self.ui.progressBar_2.setFormat('%p%')


    def checkUpload(self, f, url, dirs, link, name, series, data, search='серия'):
        curent_time = strftime("%H:%M", localtime())
        system(f'notify-send "Вышла новая серия!{name}\n{curent_time}"')
        names_dir = '_'.join(dirs.split())
        if 'серия' in search:
            data['anime']['series'][url.index(link)] += 1
        elif 'ОВА' in search:
            data['anime']['ova'][url.index(link)] += 1
            series = f"ova-{data['anime']['ova'][url.index(link)]}"
        new = path.join(f'{path.dirname(__file__)}/downloads', 
                        f'{names_dir}-{series}.mp4')
        old = path.join(f'{path.dirname(__file__)}/downloads', f'_{f}')

        rename(old, new)

        if not path.isdir(f'{self.current_path}/downloads/'):
            system(f'mkdir "{self.current_path}/downloads/"')

        if not path.isdir(f'{self.current_path}/downloads/{names_dir}'):
            system(f'mkdir "{self.current_path}/downloads/{names_dir}"')

        system(f'mv "{self.path_down}/{names_dir}-{series}.mp4" \
                "{self.path_down}/{names_dir}/"')
        print(search)
        self.setGlobalSettings(data, 'anime', 'series', data['anime']['series'])


    def handleProgress(self, blocknum, blocksize, totalsize):
        global dead, down
        readed_data = blocknum * blocksize
        if totalsize > 0:
            down = True
            self.percent = int(readed_data * 100 / totalsize)
            if dead == False:
                raise Exception("Sorry, no numbers below zero")
            QtWidgets.QApplication.processEvents()


    def Download(self, downs, f, urls, dirs, link, name, series, data, search):
        global dead, down
        dead = True
        save_loc = f'{self.current_path}/downloads/_{f}'
        try:
            self.ui.progressBar.setToolTip(f'Download:\n{dirs} -> \
                {data["anime"]["series"][urls.index(link)]+1}')
            self.ui.progressBar.setFormat('Complete %p%')
            url_request.urlretrieve(downs, save_loc, self.handleProgress)
            down = False
            self.ui.progressBar.setFormat('Completed')
            self.checkNotify(data, 'anime', dirs, series)
            data['notify']['notify'] = 'empty' if self.emptyNotify(data) else \
                                       data['notify']['notify']
            self.checkUpload(f, urls, dirs, link, name, series, data, search)
        except Exception as e:
            system(f'rm {self.current_path}/downloads/_{f}')
            system(f'notify-send "Error download anime: {dirs}\n{e}"')
            dead = True
            down = False
            print('Error: ==>\n', e)
            self.ui.progressBar.setToolTip(f'Error download\n{dirs} -> \
                {data["anime"]["series"][urls.index(link)]+1}')


    def progressCount(self, percent):
        self.ui.progressBar_2.setValue(percent)


    def uploadTrackerAnime(self):
        global dead
        data = self.uploadGlobalSettings()
        names, links = checkFixedOutput()
        self.setGlobalSettings(data, 'anime', 'track-name', names)
        self.setGlobalSettings(data, 'anime', 'track-link', links)
        self.comboTracker()


    def comboTracker(self):
        self.ui.comboBox_7.clear()
        data = self.uploadGlobalSettings()
        if len(data['anime']['track-name']) > 0:
            for i in enumerate(data['anime']['track-name']):
                self.ui.comboBox_7.addItem(i[1])
                self.ui.comboBox_7.setItemIcon(i[0], 
                    QIcon(f'{self.current_path}/icons/animevost.png'))
        self.ui.comboBox_7.setCurrentIndex(0)


    def updateClick(self):
        global enable
        if enable:
            enable = False
            self.ui.toolButton_9.hide()
            data = self.uploadGlobalSettings()
            Thread(target = self.clicker, args=(data,)).start()


    def clicker(self, data, check=True):
        global enable, dead, tab_start, while_var
        while_var = True
        tab_start = 0

        if check:
            self.thread_class = ThreadProgress(data, False)
        else:
            self.thread_class = ThreadProgress(data)

        self.thread_class._signal.connect(self.progressCount)
        self.thread_class.start()
        self.thread_class.wait()

        while_var = dead = False
        self.uploadTrackerAnime()
        sleep(1)
        dead = self.flag = True
        tab_start = None
        self.ui.toolButton_12.show()
        self.ui.toolButton_9.show()
        enable = True


    def checkItems(self):
        global enable
        self.timer_check.start(900_000)
        if enable:
            enable = self.flag = False
            self.ui.toolButton_12.hide()
            data = self.uploadGlobalSettings()
            Thread(target = self.clicker, args = (data, False)).start()


    def upComboAnime(self):
        data = self.uploadGlobalSettings()
        index = self.ui.comboBox.currentIndex()
        num = float(f"{data['anime']['series'][index]}.{data['anime']['ova'][index]}")
        self.ui.lcdNumber.display(num)


    def oneDown(self):
        global enable, dead, tab_start, while_var
        if enable:
            enable = False
            dead = while_var = True
            tab_start = 0
            data = self.uploadGlobalSettings()
            self.ui.toolButton_5.hide()
            indexs = []
            if len(data['notify']['anime']) > 0:
                for el in enumerate(data['notify']['anime']):
                    element = el[1].split(' > ')[1].split(' - new')[0]
                    indexs.append(data['anime']['name'].index(element))
            seti = list(set(indexs))
            
            def alerts():
                global enable, while_var
                alert = QMessageBox()
                alert.setIcon(QMessageBox.Information)
                alert.setText('No data for update..')
                alert.setGeometry(560, 75, 100, 100)
                alert.exec()
                enable = True
                while_var = False
                self.ui.toolButton_5.show()

            if self.ui.checkBox_2.isChecked():
                if len(seti) > 0:
                    Thread(target = self.checkDelOrDown,
                           args = (data, seti)).start()
                else:
                    alerts()
            else:
                index = self.ui.comboBox.currentIndex()
                if len(seti) > 0:
                    value = self.ui.lcdNumber.intValue()
                    Thread(target = self.oneParsing,
                           args = (data, data['anime']['urls'][index], value)).start()
                else:
                    alerts()


    def checkDelOrDown(self, data, seti):
        global enable, dead
        if len(seti) > 0:
            for i in seti:
                if dead == False:
                    break
                url = data['anime']['urls'][i]
                series = data['anime']['series'][i]
                if i == seti[-1]:
                    index = 0
                else:
                    index = randint(1, 6)
                self.oneParsing(data, url, series, index)
            enable = dead = True


    def showed(self):
        reads = self.uploadGlobalSettings()
        self.ui.comboBox.clear()
        for i in enumerate(reads['anime']['name']):
            self.ui.comboBox.addItem(i[1])
            self.ui.comboBox.setItemIcon(i[0], QIcon(
                f'{self.current_path}/icons/animevost.png'))


####<<< Manga-module >>>####
    def currentUpdate(self):
        global enable, dead, while_var, tab_start
        if enable:
            enable = False
            self.ui.toolButton_17.hide()
            tab_start = 1
            dead = while_var = True
            data = self.uploadGlobalSettings()
            Thread(target = self.upUrls, args = (data,)).start()


    def upUrls(self, data, update_check = False):
        global dead, while_var, enable
        msg = []

        driver = webdriver.Chrome(path.join(path.dirname(__file__), 'chromedriver'),
                                  options=self.option)
        for i in enumerate(data['manga']['urls']):
            try:
                with alive_bar(5, title = f'{i[0]} -> ') as bar:
                    bar()
                    if dead == False:
                        driver.quit()
                        break
                    ii = i[0] + 1
                    self.percent_all_manga = int(ii / len(data['manga']['urls']) * 100)
                    driver.get(i[1])
                    sleep(2)
                    bar()
                    if 'https://manga-chan.me' in i[1]:
                        manga = driver.find_elements(By.CLASS_NAME,
                            'manga2')[0].text.split(' Глава ')[1].split(' ')[0]
                        if '.' in manga:
                            manga = float(manga)
                        else:
                            manga = int(manga)
                        name = driver.find_element(By.CLASS_NAME,
                            'title_top_a').text.split('(')[-1][:-1:]
                        img = driver.find_element(By.ID, 'cover')
                        img = img.get_attribute('src')
                        desc = driver.find_element(By.ID, 'description').text
                    else:
                        manga = driver.find_element(By.CLASS_NAME, 'mt-3').text
                        manga = manga.split(' ')
                        if manga[-1].isdigit():
                            manga = int(manga[-1])
                        elif manga[-2].isdigit():
                            manga = int(manga[-2])
                        else:
                            try:
                                manga = float(manga[-1])
                            except:
                                manga = float(manga[-2])
                        name = driver.find_element(By.CLASS_NAME, 'name').text
                        img = driver.find_elements(By.CLASS_NAME,
                            'fotorama__img')[0].get_attribute('src')
                        desc = driver.find_element(By.CLASS_NAME,
                            'manga-description').text

                    bar()
                    data['manga']['change_numbers'][i[0]] = manga
    
                    if data['manga']['numbers'][i[0]] < manga:
                        c_d = date.today()
                        c_t = strftime("%H:%M", localtime())
                        data['manga']['logs'][i[0]] = f'{name} > {manga}'
                        head = f'[M][{c_d.day}/{c_d.month}/{c_d.year} - {c_t}] > '
                        body = f'{name} - new chapter {manga}\n'
                        note = f'{head} {body}'
                        msg.append(note)
                    else:
                        data['manga']['logs'][i[0]] = f'{name} = {manga}'
                    bar()
                    if update_check:
                        if 'description/' in data['manga']['images'][i[0]]:
                            pass
                        else:
                            image = img.split('/')[-1]
                            r = get(img, stream=True)
                            if r.status_code == 200:
                                with open(f'{self.current_path}/description/{image}',
                                    'wb') as f:
                                    r.raw.decode_content = True
                                    copyfileobj(r.raw, f)
                            loadImage(image)
                            data['manga']['images'][i[0]] = f'description/{image}'
                            data['manga']['description'][i[0]] = desc
                        data['manga']['names'][i[0]] = name
                    bar()
            except Exception as e:
                print('Error ==>\n', e)
                system(f'notify-send "Error check manga\n{e}"')
        if len(msg) > 0:
            data['notify']['manga'] += msg
            data['notify']['notify'] = 'unchecked'
            system('notify-send "Вышло кое-что новенькое.."')
        self.setGlobalSettings(data, '', '', '', False, True)
        while_var = False
        enable = dead = True
        sleep(2)
        self.percent_all_manga = 0


    def updateClickManga(self):
        global enable, dead, while_var, tab_start
        if enable:
            enable = False
            self.ui.toolButton_20.hide()
            tab_start = 1
            dead = while_var = True
            data = self.uploadGlobalSettings()
            Thread(target = self.upUrls, args = (data, True)).start()


    def updateNumber(self):
        data = self.uploadGlobalSettings()
        index = self.ui.comboBox_2.currentIndex()
        self.ui.lcdNumber_2.display(data['manga']['numbers'][index])
        if len(data['manga']['change_numbers']) == 0:
            self.ui.lcdNumber_3.display(index)
        else:
            self.ui.lcdNumber_3.display(data['manga']['change_numbers'][index])
        if data['manga']['change_numbers'][index] == data['manga']['numbers'][index]:
            self.ui.lcdNumber_3.setStyleSheet('background: rgb(50, 233, 37)')
            self.ui.toolButton_21.setEnabled(False)
        else:
            self.ui.toolButton_21.setEnabled(True)
            self.ui.lcdNumber_3.setStyleSheet('background: rgb(192, 16, 16)')


    def editLineEdit(self, edit):
        sleep(2.5)
        edit.setText('')
        data = self.uploadGlobalSettings()
        if data['mode'] == 'darkmode':
            rgb = 'background: rgb(136, 136, 136)'
        elif data['mode'] == 'lightmode':
            rgb = 'background: rgb(220, 220, 220)'
        edit.setStyleSheet(rgb)


    def showCombo(self):
        self.ui.comboBox_2.clear()
        data = self.uploadGlobalSettings()
        for i in enumerate(data['manga']['names']):
            self.ui.comboBox_2.addItem(i[1])
            self.ui.comboBox_2.setItemIcon(i[0], 
                QIcon(f'{self.current_path}/icons/mask.png'))


#### <<< Tab Description >>> ####
    def viewDescription(self):
        data = self.uploadGlobalSettings()
        name = self.ui.comboBox_4.currentText()
        index = self.ui.comboBox_3.currentIndex()
        self.ui.label_5.setPixmap(QPixmap(
            f'{self.current_path}/{data[name]["images"][index]}'))
        self.ui.textEdit.setHtml(data[name]['description'][index])


    def swithDescription(self):
        data = self.uploadGlobalSettings()
        name = self.ui.comboBox_4.currentText()
        self.ui.comboBox_3.clear()
        child = 'names'
        if name == 'anime':
            ico = 'animevost.png'
            child = 'name'
        elif name == 'manga':
            ico = 'mask.png'
        elif name == 'ranobe':
            ico = 'ranobe.png'
        for i in enumerate(data[name][child]):
            self.ui.comboBox_3.addItem(i[1])
            self.ui.comboBox_3.setItemIcon(i[0],
                QIcon(f'{self.current_path}/icons/{ico}'))
        self.viewDescription()


#### <<< Tab Ranobe >>> ####
    def setRanobe(self, check):
        global enable, dead
        dead = True
        data = self.uploadGlobalSettings()
        names = []
        images = []
        descs = []
        chapters = []
        all_chapters = []
        msg = 0
        self.ranobe_percent = 0
        try:
            for i in enumerate(data['ranobe']['urls']):
                print(i)
                if dead == False:
                    raise Exception('extra Close update Ranobe')
                name, img, description, chapter, all = parseRanobe(i[1])
                names.append(name)
                image = img.split('/')[-1]
                images.append(f'description/{image}')
                if data['ranobe']['chapters'][i[0]] < float(chapter):
                    c_d = date.today()
                    c_t = strftime("%H:%M", localtime())
                    msg += 1
                    head = f'[R][{c_d.day}/{c_d.month}/{c_d.year} - {c_t}]'
                    body = f'> {name} - new chapter {chapter}\n'
                    note = f'{head} {body}'
                    self.setGlobalSettings(data, 'notify', 'ranobe', note, True)

                if check == False:
                    r = get(img, stream=True)
                    if r.status_code == 200:
                        with open(f'{self.current_path}/description/{image}',
                            'wb') as f:
                            r.raw.decode_content = True
                            copyfileobj(r.raw, f)

                    loadImage(image)
                descs.append(description)
                chapters.append(chapter)
                all_chapters.append(all)
                self.ranobe_percent = int(
                    i[0] + 1) / len(data['ranobe']['urls'] * 100)
            if msg > 0:
                system('notify-send "Вышло кое-что новенькое.."')
                self.setGlobalSettings(data, 'notify', 'notify', 'unchecked')
            if check == False:
                self.setGlobalSettings(data, 'ranobe', 'names', names)
                self.setGlobalSettings(data, 'ranobe', 'images', images)
                self.setGlobalSettings(data, 'ranobe', 'description', descs)
            self.setGlobalSettings(data, 'ranobe', 'access-chapters', chapters)
            self.setGlobalSettings(data, 'ranobe', 'future-chapters', all_chapters)
            sleep(2.5)
            self.ranobe_percent = 0
            self.viewRanobe()
            dead = True
            self.setGlobalSettings(data, 'ranobe', 'log', '')
        except Exception as e:
            log = f'Error ==>\n{e}' 
            self.setGlobalSettings(data, 'ranobe', 'log', log)
            system(f'notify-send "Error for get data about <ranobe>\n{e}"')
        self.ui.toolButton_26.show()
        self.ui.toolButton_31.show()
        self.viewRanobe()
        enable = True


    def viewRanobe(self):
        self.ui.comboBox_6.clear()
        data = self.uploadGlobalSettings()
        if len(data['ranobe']['names']) > 0:
            for i in enumerate(data['ranobe']['names']):
                self.ui.comboBox_6.addItem(i[1])
                self.ui.comboBox_6.setItemIcon(i[0], 
                    QIcon(f'{self.current_path}/icons/ranobe.png'))


    def upComboRanobe(self):
        data = self.uploadGlobalSettings()
        index = self.ui.comboBox_6.currentIndex()
        self.ui.lcdNumber_4.display(data['ranobe']['chapters'][index])
        if len(data['ranobe']['access-chapters']) > 0:
            self.ui.lcdNumber_5.display(data['ranobe']['access-chapters'][index])
            self.ui.lcdNumber_6.display(data['ranobe']['future-chapters'][index])
        else:
            self.ui.lcdNumber_5.display(0)
            self.ui.lcdNumber_6.display(0)


    def updateRanobeUrl(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_26.hide()
            Thread(target = self.setRanobe, args = (False,)).start()


    def checkRanobeUrl(self):
        global enable
        if enable:
            enable = False
            self.startMovie()
            self.ui.toolButton_31.hide()
            Thread(target = self.setRanobe, args = (True,)).start()


app = QtWidgets.QApplication([])
application = myWindow()

exit(app.exec())
